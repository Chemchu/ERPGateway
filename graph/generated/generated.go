// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync"

	"example.com/m/v2/graph/model"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Mutation() MutationResolver
	Query() QueryResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	CierreTPV struct {
		AbiertoPor           func(childComplexity int) int
		Apertura             func(childComplexity int) int
		Beneficio            func(childComplexity int) int
		CajaInicial          func(childComplexity int) int
		CerradoPor           func(childComplexity int) int
		Cierre               func(childComplexity int) int
		DineroEsperadoEnCaja func(childComplexity int) int
		DineroRealEnCaja     func(childComplexity int) int
		DineroRetirado       func(childComplexity int) int
		FondoDeCaja          func(childComplexity int) int
		ID                   func(childComplexity int) int
		Nota                 func(childComplexity int) int
		NumVentas            func(childComplexity int) int
		Tpv                  func(childComplexity int) int
		VentasEfectivo       func(childComplexity int) int
		VentasTarjeta        func(childComplexity int) int
		VentasTotales        func(childComplexity int) int
	}

	CierreTPVMutationResponse struct {
		Cierre     func(childComplexity int) int
		Message    func(childComplexity int) int
		Successful func(childComplexity int) int
		Token      func(childComplexity int) int
	}

	Cliente struct {
		Calle  func(childComplexity int) int
		Cp     func(childComplexity int) int
		ID     func(childComplexity int) int
		Nif    func(childComplexity int) int
		Nombre func(childComplexity int) int
	}

	ClienteMutationResponse struct {
		Message    func(childComplexity int) int
		Successful func(childComplexity int) int
	}

	Empleado struct {
		Apellidos      func(childComplexity int) int
		Dni            func(childComplexity int) int
		Email          func(childComplexity int) int
		FechaAlta      func(childComplexity int) int
		Genero         func(childComplexity int) int
		HorasPorSemana func(childComplexity int) int
		ID             func(childComplexity int) int
		Nombre         func(childComplexity int) int
		Rol            func(childComplexity int) int
	}

	EmpleadoMutationResponse struct {
		Message    func(childComplexity int) int
		Successful func(childComplexity int) int
	}

	JwtValidationResult struct {
		Validado func(childComplexity int) int
	}

	LoginResult struct {
		Message func(childComplexity int) int
		Success func(childComplexity int) int
		Token   func(childComplexity int) int
	}

	Mutation struct {
		AddCierreTpv     func(childComplexity int, cierre model.CierreTPVInput) int
		AddCliente       func(childComplexity int, nif string, nombre string, calle *string, cp *string) int
		AddClientesFile  func(childComplexity int, csv string) int
		AddEmpleado      func(childComplexity int, nombre string, apellidos string, dni string, rol string, genero *string, email string) int
		AddProducto      func(childComplexity int, producto model.ProductoAddInput) int
		AddProductosFile func(childComplexity int, csv string) int
		AddTpv           func(childComplexity int, nombre string, enUsoPor *string, libre *bool, cajaInicial *int) int
		AddVenta         func(childComplexity int, fields model.VentaFields) int
		AddVentasFile    func(childComplexity int, ventasJSON string) int
		DeleteCierreTpv  func(childComplexity int, id string) int
		DeleteCliente    func(childComplexity int, id string) int
		DeleteEmpleado   func(childComplexity int, id string) int
		DeleteProducto   func(childComplexity int, id string) int
		DeleteTpv        func(childComplexity int, id string) int
		DeleteVenta      func(childComplexity int, id string) int
		FreeTpv          func(childComplexity int, idEmpleado string, idTpv string) int
		OcupyTpv         func(childComplexity int, idEmpleado string, idTpv string, cajaInicial float64) int
		UpdateCierreTpv  func(childComplexity int, cierre *model.CierreTPVInput) int
		UpdateCliente    func(childComplexity int, id string, nif *string, nombre *string, calle *string, cp *string) int
		UpdateEmpleado   func(childComplexity int, id string, nombre *string, apellidos *string, dni *string, rol *string, genero *string, email *string, horasPorSemana *float64, fechaAlta *string) int
		UpdateProducto   func(childComplexity int, producto model.ProductoUpdateInput) int
		UpdateTpv        func(childComplexity int, id string, nombre *string, enUsoPor *string, libre *bool, cajaInicial *int) int
		UpdateVenta      func(childComplexity int, id string, productos []*model.ProductoVendidoInput, dineroEntregadoEfectivo *float64, descuentoPorcentaje *float64, precioVentaTotal float64, cambio *float64, clienteID *model.ClienteInput, vendidoPor *model.EmpleadoInput, modificadoPor *model.EmpleadoInput, tipo *string, descuentoEfectivo *float64) int
	}

	Producto struct {
		Alta            func(childComplexity int) int
		Cantidad        func(childComplexity int) int
		CantidadRestock func(childComplexity int) int
		CreatedAt       func(childComplexity int) int
		Ean             func(childComplexity int) int
		Familia         func(childComplexity int) int
		ID              func(childComplexity int) int
		Img             func(childComplexity int) int
		Iva             func(childComplexity int) int
		Margen          func(childComplexity int) int
		Nombre          func(childComplexity int) int
		PrecioCompra    func(childComplexity int) int
		PrecioVenta     func(childComplexity int) int
		Promociones     func(childComplexity int) int
		Proveedor       func(childComplexity int) int
		UpdatedAt       func(childComplexity int) int
	}

	ProductoMutationResponse struct {
		Message    func(childComplexity int) int
		Successful func(childComplexity int) int
	}

	ProductoVendido struct {
		CantidadVendida func(childComplexity int) int
		CreatedAt       func(childComplexity int) int
		Ean             func(childComplexity int) int
		Familia         func(childComplexity int) int
		ID              func(childComplexity int) int
		Iva             func(childComplexity int) int
		Margen          func(childComplexity int) int
		Nombre          func(childComplexity int) int
		PrecioCompra    func(childComplexity int) int
		PrecioVenta     func(childComplexity int) int
		Proveedor       func(childComplexity int) int
		UpdatedAt       func(childComplexity int) int
	}

	Query struct {
		CierreTpv   func(childComplexity int, find model.CierreTPVFind) int
		CierresTPVs func(childComplexity int, find *model.CierresTPVFind, limit *int) int
		Cliente     func(childComplexity int, find model.ClienteFind) int
		Clientes    func(childComplexity int, find *model.ClientesFind, limit *int) int
		Empleado    func(childComplexity int, find model.EmpleadoFind) int
		Empleados   func(childComplexity int, find *model.EmpleadosFind, limit *int) int
		Login       func(childComplexity int, loginValues model.Credentials) int
		Producto    func(childComplexity int, find model.ProductoFind) int
		Productos   func(childComplexity int, find *model.ProductosFind, limit *int) int
		Tpv         func(childComplexity int, find model.TPVFind) int
		Tpvs        func(childComplexity int, find *model.TPVsFind, limit *int) int
		ValidateJwt func(childComplexity int, jwt string) int
		Venta       func(childComplexity int, id string) int
		Ventas      func(childComplexity int, find *model.VentasFind, limit *int, order *string, offset *int) int
	}

	ResponseMutation struct {
		Message    func(childComplexity int) int
		Successful func(childComplexity int) int
	}

	TPV struct {
		CajaInicial func(childComplexity int) int
		CreatedAt   func(childComplexity int) int
		EnUsoPor    func(childComplexity int) int
		ID          func(childComplexity int) int
		Libre       func(childComplexity int) int
		Nombre      func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
	}

	TPVMutationJwtResponse struct {
		Successful func(childComplexity int) int
		Token      func(childComplexity int) int
	}

	TPVMutationResponse struct {
		Message    func(childComplexity int) int
		Successful func(childComplexity int) int
	}

	Venta struct {
		Cambio                  func(childComplexity int) int
		Cliente                 func(childComplexity int) int
		CreatedAt               func(childComplexity int) int
		DescuentoEfectivo       func(childComplexity int) int
		DescuentoPorcentaje     func(childComplexity int) int
		DineroEntregadoEfectivo func(childComplexity int) int
		DineroEntregadoTarjeta  func(childComplexity int) int
		ID                      func(childComplexity int) int
		ModificadoPor           func(childComplexity int) int
		PrecioVentaTotal        func(childComplexity int) int
		PrecioVentaTotalSinDto  func(childComplexity int) int
		Productos               func(childComplexity int) int
		Tipo                    func(childComplexity int) int
		Tpv                     func(childComplexity int) int
		UpdatedAt               func(childComplexity int) int
		VendidoPor              func(childComplexity int) int
	}

	VentaMutationResponse struct {
		CreatedAt  func(childComplexity int) int
		ID         func(childComplexity int) int
		Message    func(childComplexity int) int
		Successful func(childComplexity int) int
	}
}

type MutationResolver interface {
	AddCliente(ctx context.Context, nif string, nombre string, calle *string, cp *string) (*model.ClienteMutationResponse, error)
	DeleteCliente(ctx context.Context, id string) (*model.ClienteMutationResponse, error)
	UpdateCliente(ctx context.Context, id string, nif *string, nombre *string, calle *string, cp *string) (*model.ClienteMutationResponse, error)
	AddEmpleado(ctx context.Context, nombre string, apellidos string, dni string, rol string, genero *string, email string) (*model.EmpleadoMutationResponse, error)
	DeleteEmpleado(ctx context.Context, id string) (*model.EmpleadoMutationResponse, error)
	UpdateEmpleado(ctx context.Context, id string, nombre *string, apellidos *string, dni *string, rol *string, genero *string, email *string, horasPorSemana *float64, fechaAlta *string) (*model.EmpleadoMutationResponse, error)
	AddProductosFile(ctx context.Context, csv string) (*model.ResponseMutation, error)
	AddClientesFile(ctx context.Context, csv string) (*model.ResponseMutation, error)
	AddVentasFile(ctx context.Context, ventasJSON string) (*model.ResponseMutation, error)
	AddProducto(ctx context.Context, producto model.ProductoAddInput) (*model.ProductoMutationResponse, error)
	DeleteProducto(ctx context.Context, id string) (*model.ProductoMutationResponse, error)
	UpdateProducto(ctx context.Context, producto model.ProductoUpdateInput) (*model.ProductoMutationResponse, error)
	AddCierreTpv(ctx context.Context, cierre model.CierreTPVInput) (*model.CierreTPVMutationResponse, error)
	DeleteCierreTpv(ctx context.Context, id string) (*model.TPVMutationResponse, error)
	UpdateCierreTpv(ctx context.Context, cierre *model.CierreTPVInput) (*model.CierreTPVMutationResponse, error)
	AddTpv(ctx context.Context, nombre string, enUsoPor *string, libre *bool, cajaInicial *int) (*model.TPVMutationResponse, error)
	DeleteTpv(ctx context.Context, id string) (*model.TPVMutationResponse, error)
	UpdateTpv(ctx context.Context, id string, nombre *string, enUsoPor *string, libre *bool, cajaInicial *int) (*model.TPVMutationResponse, error)
	OcupyTpv(ctx context.Context, idEmpleado string, idTpv string, cajaInicial float64) (*model.TPVMutationJwtResponse, error)
	FreeTpv(ctx context.Context, idEmpleado string, idTpv string) (*model.TPVMutationJwtResponse, error)
	AddVenta(ctx context.Context, fields model.VentaFields) (*model.VentaMutationResponse, error)
	DeleteVenta(ctx context.Context, id string) (*model.VentaMutationResponse, error)
	UpdateVenta(ctx context.Context, id string, productos []*model.ProductoVendidoInput, dineroEntregadoEfectivo *float64, descuentoPorcentaje *float64, precioVentaTotal float64, cambio *float64, clienteID *model.ClienteInput, vendidoPor *model.EmpleadoInput, modificadoPor *model.EmpleadoInput, tipo *string, descuentoEfectivo *float64) (*model.VentaMutationResponse, error)
}
type QueryResolver interface {
	Login(ctx context.Context, loginValues model.Credentials) (*model.LoginResult, error)
	ValidateJwt(ctx context.Context, jwt string) (*model.JwtValidationResult, error)
	Cliente(ctx context.Context, find model.ClienteFind) (*model.Cliente, error)
	Clientes(ctx context.Context, find *model.ClientesFind, limit *int) ([]*model.Cliente, error)
	Empleado(ctx context.Context, find model.EmpleadoFind) (*model.Empleado, error)
	Empleados(ctx context.Context, find *model.EmpleadosFind, limit *int) ([]*model.Empleado, error)
	Producto(ctx context.Context, find model.ProductoFind) (*model.Producto, error)
	Productos(ctx context.Context, find *model.ProductosFind, limit *int) ([]*model.Producto, error)
	CierreTpv(ctx context.Context, find model.CierreTPVFind) (*model.CierreTpv, error)
	CierresTPVs(ctx context.Context, find *model.CierresTPVFind, limit *int) ([]*model.CierreTpv, error)
	Tpv(ctx context.Context, find model.TPVFind) (*model.Tpv, error)
	Tpvs(ctx context.Context, find *model.TPVsFind, limit *int) ([]*model.Tpv, error)
	Venta(ctx context.Context, id string) (*model.Venta, error)
	Ventas(ctx context.Context, find *model.VentasFind, limit *int, order *string, offset *int) ([]*model.Venta, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "CierreTPV.abiertoPor":
		if e.complexity.CierreTPV.AbiertoPor == nil {
			break
		}

		return e.complexity.CierreTPV.AbiertoPor(childComplexity), true

	case "CierreTPV.apertura":
		if e.complexity.CierreTPV.Apertura == nil {
			break
		}

		return e.complexity.CierreTPV.Apertura(childComplexity), true

	case "CierreTPV.beneficio":
		if e.complexity.CierreTPV.Beneficio == nil {
			break
		}

		return e.complexity.CierreTPV.Beneficio(childComplexity), true

	case "CierreTPV.cajaInicial":
		if e.complexity.CierreTPV.CajaInicial == nil {
			break
		}

		return e.complexity.CierreTPV.CajaInicial(childComplexity), true

	case "CierreTPV.cerradoPor":
		if e.complexity.CierreTPV.CerradoPor == nil {
			break
		}

		return e.complexity.CierreTPV.CerradoPor(childComplexity), true

	case "CierreTPV.cierre":
		if e.complexity.CierreTPV.Cierre == nil {
			break
		}

		return e.complexity.CierreTPV.Cierre(childComplexity), true

	case "CierreTPV.dineroEsperadoEnCaja":
		if e.complexity.CierreTPV.DineroEsperadoEnCaja == nil {
			break
		}

		return e.complexity.CierreTPV.DineroEsperadoEnCaja(childComplexity), true

	case "CierreTPV.dineroRealEnCaja":
		if e.complexity.CierreTPV.DineroRealEnCaja == nil {
			break
		}

		return e.complexity.CierreTPV.DineroRealEnCaja(childComplexity), true

	case "CierreTPV.dineroRetirado":
		if e.complexity.CierreTPV.DineroRetirado == nil {
			break
		}

		return e.complexity.CierreTPV.DineroRetirado(childComplexity), true

	case "CierreTPV.fondoDeCaja":
		if e.complexity.CierreTPV.FondoDeCaja == nil {
			break
		}

		return e.complexity.CierreTPV.FondoDeCaja(childComplexity), true

	case "CierreTPV._id":
		if e.complexity.CierreTPV.ID == nil {
			break
		}

		return e.complexity.CierreTPV.ID(childComplexity), true

	case "CierreTPV.nota":
		if e.complexity.CierreTPV.Nota == nil {
			break
		}

		return e.complexity.CierreTPV.Nota(childComplexity), true

	case "CierreTPV.numVentas":
		if e.complexity.CierreTPV.NumVentas == nil {
			break
		}

		return e.complexity.CierreTPV.NumVentas(childComplexity), true

	case "CierreTPV.tpv":
		if e.complexity.CierreTPV.Tpv == nil {
			break
		}

		return e.complexity.CierreTPV.Tpv(childComplexity), true

	case "CierreTPV.ventasEfectivo":
		if e.complexity.CierreTPV.VentasEfectivo == nil {
			break
		}

		return e.complexity.CierreTPV.VentasEfectivo(childComplexity), true

	case "CierreTPV.ventasTarjeta":
		if e.complexity.CierreTPV.VentasTarjeta == nil {
			break
		}

		return e.complexity.CierreTPV.VentasTarjeta(childComplexity), true

	case "CierreTPV.ventasTotales":
		if e.complexity.CierreTPV.VentasTotales == nil {
			break
		}

		return e.complexity.CierreTPV.VentasTotales(childComplexity), true

	case "CierreTPVMutationResponse.cierre":
		if e.complexity.CierreTPVMutationResponse.Cierre == nil {
			break
		}

		return e.complexity.CierreTPVMutationResponse.Cierre(childComplexity), true

	case "CierreTPVMutationResponse.message":
		if e.complexity.CierreTPVMutationResponse.Message == nil {
			break
		}

		return e.complexity.CierreTPVMutationResponse.Message(childComplexity), true

	case "CierreTPVMutationResponse.successful":
		if e.complexity.CierreTPVMutationResponse.Successful == nil {
			break
		}

		return e.complexity.CierreTPVMutationResponse.Successful(childComplexity), true

	case "CierreTPVMutationResponse.token":
		if e.complexity.CierreTPVMutationResponse.Token == nil {
			break
		}

		return e.complexity.CierreTPVMutationResponse.Token(childComplexity), true

	case "Cliente.calle":
		if e.complexity.Cliente.Calle == nil {
			break
		}

		return e.complexity.Cliente.Calle(childComplexity), true

	case "Cliente.cp":
		if e.complexity.Cliente.Cp == nil {
			break
		}

		return e.complexity.Cliente.Cp(childComplexity), true

	case "Cliente._id":
		if e.complexity.Cliente.ID == nil {
			break
		}

		return e.complexity.Cliente.ID(childComplexity), true

	case "Cliente.nif":
		if e.complexity.Cliente.Nif == nil {
			break
		}

		return e.complexity.Cliente.Nif(childComplexity), true

	case "Cliente.nombre":
		if e.complexity.Cliente.Nombre == nil {
			break
		}

		return e.complexity.Cliente.Nombre(childComplexity), true

	case "ClienteMutationResponse.message":
		if e.complexity.ClienteMutationResponse.Message == nil {
			break
		}

		return e.complexity.ClienteMutationResponse.Message(childComplexity), true

	case "ClienteMutationResponse.successful":
		if e.complexity.ClienteMutationResponse.Successful == nil {
			break
		}

		return e.complexity.ClienteMutationResponse.Successful(childComplexity), true

	case "Empleado.apellidos":
		if e.complexity.Empleado.Apellidos == nil {
			break
		}

		return e.complexity.Empleado.Apellidos(childComplexity), true

	case "Empleado.dni":
		if e.complexity.Empleado.Dni == nil {
			break
		}

		return e.complexity.Empleado.Dni(childComplexity), true

	case "Empleado.email":
		if e.complexity.Empleado.Email == nil {
			break
		}

		return e.complexity.Empleado.Email(childComplexity), true

	case "Empleado.fechaAlta":
		if e.complexity.Empleado.FechaAlta == nil {
			break
		}

		return e.complexity.Empleado.FechaAlta(childComplexity), true

	case "Empleado.genero":
		if e.complexity.Empleado.Genero == nil {
			break
		}

		return e.complexity.Empleado.Genero(childComplexity), true

	case "Empleado.horasPorSemana":
		if e.complexity.Empleado.HorasPorSemana == nil {
			break
		}

		return e.complexity.Empleado.HorasPorSemana(childComplexity), true

	case "Empleado._id":
		if e.complexity.Empleado.ID == nil {
			break
		}

		return e.complexity.Empleado.ID(childComplexity), true

	case "Empleado.nombre":
		if e.complexity.Empleado.Nombre == nil {
			break
		}

		return e.complexity.Empleado.Nombre(childComplexity), true

	case "Empleado.rol":
		if e.complexity.Empleado.Rol == nil {
			break
		}

		return e.complexity.Empleado.Rol(childComplexity), true

	case "EmpleadoMutationResponse.message":
		if e.complexity.EmpleadoMutationResponse.Message == nil {
			break
		}

		return e.complexity.EmpleadoMutationResponse.Message(childComplexity), true

	case "EmpleadoMutationResponse.successful":
		if e.complexity.EmpleadoMutationResponse.Successful == nil {
			break
		}

		return e.complexity.EmpleadoMutationResponse.Successful(childComplexity), true

	case "JwtValidationResult.validado":
		if e.complexity.JwtValidationResult.Validado == nil {
			break
		}

		return e.complexity.JwtValidationResult.Validado(childComplexity), true

	case "LoginResult.message":
		if e.complexity.LoginResult.Message == nil {
			break
		}

		return e.complexity.LoginResult.Message(childComplexity), true

	case "LoginResult.success":
		if e.complexity.LoginResult.Success == nil {
			break
		}

		return e.complexity.LoginResult.Success(childComplexity), true

	case "LoginResult.token":
		if e.complexity.LoginResult.Token == nil {
			break
		}

		return e.complexity.LoginResult.Token(childComplexity), true

	case "Mutation.addCierreTPV":
		if e.complexity.Mutation.AddCierreTpv == nil {
			break
		}

		args, err := ec.field_Mutation_addCierreTPV_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddCierreTpv(childComplexity, args["cierre"].(model.CierreTPVInput)), true

	case "Mutation.addCliente":
		if e.complexity.Mutation.AddCliente == nil {
			break
		}

		args, err := ec.field_Mutation_addCliente_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddCliente(childComplexity, args["nif"].(string), args["nombre"].(string), args["calle"].(*string), args["cp"].(*string)), true

	case "Mutation.addClientesFile":
		if e.complexity.Mutation.AddClientesFile == nil {
			break
		}

		args, err := ec.field_Mutation_addClientesFile_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddClientesFile(childComplexity, args["csv"].(string)), true

	case "Mutation.addEmpleado":
		if e.complexity.Mutation.AddEmpleado == nil {
			break
		}

		args, err := ec.field_Mutation_addEmpleado_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddEmpleado(childComplexity, args["nombre"].(string), args["apellidos"].(string), args["dni"].(string), args["rol"].(string), args["genero"].(*string), args["email"].(string)), true

	case "Mutation.addProducto":
		if e.complexity.Mutation.AddProducto == nil {
			break
		}

		args, err := ec.field_Mutation_addProducto_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddProducto(childComplexity, args["producto"].(model.ProductoAddInput)), true

	case "Mutation.addProductosFile":
		if e.complexity.Mutation.AddProductosFile == nil {
			break
		}

		args, err := ec.field_Mutation_addProductosFile_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddProductosFile(childComplexity, args["csv"].(string)), true

	case "Mutation.addTPV":
		if e.complexity.Mutation.AddTpv == nil {
			break
		}

		args, err := ec.field_Mutation_addTPV_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddTpv(childComplexity, args["nombre"].(string), args["enUsoPor"].(*string), args["libre"].(*bool), args["cajaInicial"].(*int)), true

	case "Mutation.addVenta":
		if e.complexity.Mutation.AddVenta == nil {
			break
		}

		args, err := ec.field_Mutation_addVenta_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddVenta(childComplexity, args["fields"].(model.VentaFields)), true

	case "Mutation.addVentasFile":
		if e.complexity.Mutation.AddVentasFile == nil {
			break
		}

		args, err := ec.field_Mutation_addVentasFile_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddVentasFile(childComplexity, args["ventasJson"].(string)), true

	case "Mutation.deleteCierreTPV":
		if e.complexity.Mutation.DeleteCierreTpv == nil {
			break
		}

		args, err := ec.field_Mutation_deleteCierreTPV_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteCierreTpv(childComplexity, args["_id"].(string)), true

	case "Mutation.deleteCliente":
		if e.complexity.Mutation.DeleteCliente == nil {
			break
		}

		args, err := ec.field_Mutation_deleteCliente_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteCliente(childComplexity, args["_id"].(string)), true

	case "Mutation.deleteEmpleado":
		if e.complexity.Mutation.DeleteEmpleado == nil {
			break
		}

		args, err := ec.field_Mutation_deleteEmpleado_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteEmpleado(childComplexity, args["_id"].(string)), true

	case "Mutation.deleteProducto":
		if e.complexity.Mutation.DeleteProducto == nil {
			break
		}

		args, err := ec.field_Mutation_deleteProducto_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteProducto(childComplexity, args["_id"].(string)), true

	case "Mutation.deleteTPV":
		if e.complexity.Mutation.DeleteTpv == nil {
			break
		}

		args, err := ec.field_Mutation_deleteTPV_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteTpv(childComplexity, args["_id"].(string)), true

	case "Mutation.deleteVenta":
		if e.complexity.Mutation.DeleteVenta == nil {
			break
		}

		args, err := ec.field_Mutation_deleteVenta_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteVenta(childComplexity, args["_id"].(string)), true

	case "Mutation.freeTPV":
		if e.complexity.Mutation.FreeTpv == nil {
			break
		}

		args, err := ec.field_Mutation_freeTPV_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.FreeTpv(childComplexity, args["idEmpleado"].(string), args["idTPV"].(string)), true

	case "Mutation.ocupyTPV":
		if e.complexity.Mutation.OcupyTpv == nil {
			break
		}

		args, err := ec.field_Mutation_ocupyTPV_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.OcupyTpv(childComplexity, args["idEmpleado"].(string), args["idTPV"].(string), args["cajaInicial"].(float64)), true

	case "Mutation.updateCierreTPV":
		if e.complexity.Mutation.UpdateCierreTpv == nil {
			break
		}

		args, err := ec.field_Mutation_updateCierreTPV_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateCierreTpv(childComplexity, args["cierre"].(*model.CierreTPVInput)), true

	case "Mutation.updateCliente":
		if e.complexity.Mutation.UpdateCliente == nil {
			break
		}

		args, err := ec.field_Mutation_updateCliente_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateCliente(childComplexity, args["_id"].(string), args["nif"].(*string), args["nombre"].(*string), args["calle"].(*string), args["cp"].(*string)), true

	case "Mutation.updateEmpleado":
		if e.complexity.Mutation.UpdateEmpleado == nil {
			break
		}

		args, err := ec.field_Mutation_updateEmpleado_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateEmpleado(childComplexity, args["_id"].(string), args["nombre"].(*string), args["apellidos"].(*string), args["dni"].(*string), args["rol"].(*string), args["genero"].(*string), args["email"].(*string), args["horasPorSemana"].(*float64), args["fechaAlta"].(*string)), true

	case "Mutation.updateProducto":
		if e.complexity.Mutation.UpdateProducto == nil {
			break
		}

		args, err := ec.field_Mutation_updateProducto_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateProducto(childComplexity, args["producto"].(model.ProductoUpdateInput)), true

	case "Mutation.updateTPV":
		if e.complexity.Mutation.UpdateTpv == nil {
			break
		}

		args, err := ec.field_Mutation_updateTPV_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateTpv(childComplexity, args["_id"].(string), args["nombre"].(*string), args["enUsoPor"].(*string), args["libre"].(*bool), args["cajaInicial"].(*int)), true

	case "Mutation.updateVenta":
		if e.complexity.Mutation.UpdateVenta == nil {
			break
		}

		args, err := ec.field_Mutation_updateVenta_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateVenta(childComplexity, args["_id"].(string), args["productos"].([]*model.ProductoVendidoInput), args["dineroEntregadoEfectivo"].(*float64), args["descuentoPorcentaje"].(*float64), args["precioVentaTotal"].(float64), args["cambio"].(*float64), args["clienteId"].(*model.ClienteInput), args["vendidoPor"].(*model.EmpleadoInput), args["modificadoPor"].(*model.EmpleadoInput), args["tipo"].(*string), args["descuentoEfectivo"].(*float64)), true

	case "Producto.alta":
		if e.complexity.Producto.Alta == nil {
			break
		}

		return e.complexity.Producto.Alta(childComplexity), true

	case "Producto.cantidad":
		if e.complexity.Producto.Cantidad == nil {
			break
		}

		return e.complexity.Producto.Cantidad(childComplexity), true

	case "Producto.cantidadRestock":
		if e.complexity.Producto.CantidadRestock == nil {
			break
		}

		return e.complexity.Producto.CantidadRestock(childComplexity), true

	case "Producto.createdAt":
		if e.complexity.Producto.CreatedAt == nil {
			break
		}

		return e.complexity.Producto.CreatedAt(childComplexity), true

	case "Producto.ean":
		if e.complexity.Producto.Ean == nil {
			break
		}

		return e.complexity.Producto.Ean(childComplexity), true

	case "Producto.familia":
		if e.complexity.Producto.Familia == nil {
			break
		}

		return e.complexity.Producto.Familia(childComplexity), true

	case "Producto._id":
		if e.complexity.Producto.ID == nil {
			break
		}

		return e.complexity.Producto.ID(childComplexity), true

	case "Producto.img":
		if e.complexity.Producto.Img == nil {
			break
		}

		return e.complexity.Producto.Img(childComplexity), true

	case "Producto.iva":
		if e.complexity.Producto.Iva == nil {
			break
		}

		return e.complexity.Producto.Iva(childComplexity), true

	case "Producto.margen":
		if e.complexity.Producto.Margen == nil {
			break
		}

		return e.complexity.Producto.Margen(childComplexity), true

	case "Producto.nombre":
		if e.complexity.Producto.Nombre == nil {
			break
		}

		return e.complexity.Producto.Nombre(childComplexity), true

	case "Producto.precioCompra":
		if e.complexity.Producto.PrecioCompra == nil {
			break
		}

		return e.complexity.Producto.PrecioCompra(childComplexity), true

	case "Producto.precioVenta":
		if e.complexity.Producto.PrecioVenta == nil {
			break
		}

		return e.complexity.Producto.PrecioVenta(childComplexity), true

	case "Producto.promociones":
		if e.complexity.Producto.Promociones == nil {
			break
		}

		return e.complexity.Producto.Promociones(childComplexity), true

	case "Producto.proveedor":
		if e.complexity.Producto.Proveedor == nil {
			break
		}

		return e.complexity.Producto.Proveedor(childComplexity), true

	case "Producto.updatedAt":
		if e.complexity.Producto.UpdatedAt == nil {
			break
		}

		return e.complexity.Producto.UpdatedAt(childComplexity), true

	case "ProductoMutationResponse.message":
		if e.complexity.ProductoMutationResponse.Message == nil {
			break
		}

		return e.complexity.ProductoMutationResponse.Message(childComplexity), true

	case "ProductoMutationResponse.successful":
		if e.complexity.ProductoMutationResponse.Successful == nil {
			break
		}

		return e.complexity.ProductoMutationResponse.Successful(childComplexity), true

	case "ProductoVendido.cantidadVendida":
		if e.complexity.ProductoVendido.CantidadVendida == nil {
			break
		}

		return e.complexity.ProductoVendido.CantidadVendida(childComplexity), true

	case "ProductoVendido.createdAt":
		if e.complexity.ProductoVendido.CreatedAt == nil {
			break
		}

		return e.complexity.ProductoVendido.CreatedAt(childComplexity), true

	case "ProductoVendido.ean":
		if e.complexity.ProductoVendido.Ean == nil {
			break
		}

		return e.complexity.ProductoVendido.Ean(childComplexity), true

	case "ProductoVendido.familia":
		if e.complexity.ProductoVendido.Familia == nil {
			break
		}

		return e.complexity.ProductoVendido.Familia(childComplexity), true

	case "ProductoVendido._id":
		if e.complexity.ProductoVendido.ID == nil {
			break
		}

		return e.complexity.ProductoVendido.ID(childComplexity), true

	case "ProductoVendido.iva":
		if e.complexity.ProductoVendido.Iva == nil {
			break
		}

		return e.complexity.ProductoVendido.Iva(childComplexity), true

	case "ProductoVendido.margen":
		if e.complexity.ProductoVendido.Margen == nil {
			break
		}

		return e.complexity.ProductoVendido.Margen(childComplexity), true

	case "ProductoVendido.nombre":
		if e.complexity.ProductoVendido.Nombre == nil {
			break
		}

		return e.complexity.ProductoVendido.Nombre(childComplexity), true

	case "ProductoVendido.precioCompra":
		if e.complexity.ProductoVendido.PrecioCompra == nil {
			break
		}

		return e.complexity.ProductoVendido.PrecioCompra(childComplexity), true

	case "ProductoVendido.precioVenta":
		if e.complexity.ProductoVendido.PrecioVenta == nil {
			break
		}

		return e.complexity.ProductoVendido.PrecioVenta(childComplexity), true

	case "ProductoVendido.proveedor":
		if e.complexity.ProductoVendido.Proveedor == nil {
			break
		}

		return e.complexity.ProductoVendido.Proveedor(childComplexity), true

	case "ProductoVendido.updatedAt":
		if e.complexity.ProductoVendido.UpdatedAt == nil {
			break
		}

		return e.complexity.ProductoVendido.UpdatedAt(childComplexity), true

	case "Query.cierreTPV":
		if e.complexity.Query.CierreTpv == nil {
			break
		}

		args, err := ec.field_Query_cierreTPV_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CierreTpv(childComplexity, args["find"].(model.CierreTPVFind)), true

	case "Query.cierresTPVs":
		if e.complexity.Query.CierresTPVs == nil {
			break
		}

		args, err := ec.field_Query_cierresTPVs_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CierresTPVs(childComplexity, args["find"].(*model.CierresTPVFind), args["limit"].(*int)), true

	case "Query.cliente":
		if e.complexity.Query.Cliente == nil {
			break
		}

		args, err := ec.field_Query_cliente_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Cliente(childComplexity, args["find"].(model.ClienteFind)), true

	case "Query.clientes":
		if e.complexity.Query.Clientes == nil {
			break
		}

		args, err := ec.field_Query_clientes_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Clientes(childComplexity, args["find"].(*model.ClientesFind), args["limit"].(*int)), true

	case "Query.empleado":
		if e.complexity.Query.Empleado == nil {
			break
		}

		args, err := ec.field_Query_empleado_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Empleado(childComplexity, args["find"].(model.EmpleadoFind)), true

	case "Query.empleados":
		if e.complexity.Query.Empleados == nil {
			break
		}

		args, err := ec.field_Query_empleados_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Empleados(childComplexity, args["find"].(*model.EmpleadosFind), args["limit"].(*int)), true

	case "Query.login":
		if e.complexity.Query.Login == nil {
			break
		}

		args, err := ec.field_Query_login_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Login(childComplexity, args["loginValues"].(model.Credentials)), true

	case "Query.producto":
		if e.complexity.Query.Producto == nil {
			break
		}

		args, err := ec.field_Query_producto_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Producto(childComplexity, args["find"].(model.ProductoFind)), true

	case "Query.productos":
		if e.complexity.Query.Productos == nil {
			break
		}

		args, err := ec.field_Query_productos_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Productos(childComplexity, args["find"].(*model.ProductosFind), args["limit"].(*int)), true

	case "Query.tpv":
		if e.complexity.Query.Tpv == nil {
			break
		}

		args, err := ec.field_Query_tpv_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Tpv(childComplexity, args["find"].(model.TPVFind)), true

	case "Query.tpvs":
		if e.complexity.Query.Tpvs == nil {
			break
		}

		args, err := ec.field_Query_tpvs_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Tpvs(childComplexity, args["find"].(*model.TPVsFind), args["limit"].(*int)), true

	case "Query.validateJwt":
		if e.complexity.Query.ValidateJwt == nil {
			break
		}

		args, err := ec.field_Query_validateJwt_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ValidateJwt(childComplexity, args["jwt"].(string)), true

	case "Query.venta":
		if e.complexity.Query.Venta == nil {
			break
		}

		args, err := ec.field_Query_venta_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Venta(childComplexity, args["_id"].(string)), true

	case "Query.ventas":
		if e.complexity.Query.Ventas == nil {
			break
		}

		args, err := ec.field_Query_ventas_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Ventas(childComplexity, args["find"].(*model.VentasFind), args["limit"].(*int), args["order"].(*string), args["offset"].(*int)), true

	case "ResponseMutation.message":
		if e.complexity.ResponseMutation.Message == nil {
			break
		}

		return e.complexity.ResponseMutation.Message(childComplexity), true

	case "ResponseMutation.successful":
		if e.complexity.ResponseMutation.Successful == nil {
			break
		}

		return e.complexity.ResponseMutation.Successful(childComplexity), true

	case "TPV.cajaInicial":
		if e.complexity.TPV.CajaInicial == nil {
			break
		}

		return e.complexity.TPV.CajaInicial(childComplexity), true

	case "TPV.createdAt":
		if e.complexity.TPV.CreatedAt == nil {
			break
		}

		return e.complexity.TPV.CreatedAt(childComplexity), true

	case "TPV.enUsoPor":
		if e.complexity.TPV.EnUsoPor == nil {
			break
		}

		return e.complexity.TPV.EnUsoPor(childComplexity), true

	case "TPV._id":
		if e.complexity.TPV.ID == nil {
			break
		}

		return e.complexity.TPV.ID(childComplexity), true

	case "TPV.libre":
		if e.complexity.TPV.Libre == nil {
			break
		}

		return e.complexity.TPV.Libre(childComplexity), true

	case "TPV.nombre":
		if e.complexity.TPV.Nombre == nil {
			break
		}

		return e.complexity.TPV.Nombre(childComplexity), true

	case "TPV.updatedAt":
		if e.complexity.TPV.UpdatedAt == nil {
			break
		}

		return e.complexity.TPV.UpdatedAt(childComplexity), true

	case "TPVMutationJwtResponse.successful":
		if e.complexity.TPVMutationJwtResponse.Successful == nil {
			break
		}

		return e.complexity.TPVMutationJwtResponse.Successful(childComplexity), true

	case "TPVMutationJwtResponse.token":
		if e.complexity.TPVMutationJwtResponse.Token == nil {
			break
		}

		return e.complexity.TPVMutationJwtResponse.Token(childComplexity), true

	case "TPVMutationResponse.message":
		if e.complexity.TPVMutationResponse.Message == nil {
			break
		}

		return e.complexity.TPVMutationResponse.Message(childComplexity), true

	case "TPVMutationResponse.successful":
		if e.complexity.TPVMutationResponse.Successful == nil {
			break
		}

		return e.complexity.TPVMutationResponse.Successful(childComplexity), true

	case "Venta.cambio":
		if e.complexity.Venta.Cambio == nil {
			break
		}

		return e.complexity.Venta.Cambio(childComplexity), true

	case "Venta.cliente":
		if e.complexity.Venta.Cliente == nil {
			break
		}

		return e.complexity.Venta.Cliente(childComplexity), true

	case "Venta.createdAt":
		if e.complexity.Venta.CreatedAt == nil {
			break
		}

		return e.complexity.Venta.CreatedAt(childComplexity), true

	case "Venta.descuentoEfectivo":
		if e.complexity.Venta.DescuentoEfectivo == nil {
			break
		}

		return e.complexity.Venta.DescuentoEfectivo(childComplexity), true

	case "Venta.descuentoPorcentaje":
		if e.complexity.Venta.DescuentoPorcentaje == nil {
			break
		}

		return e.complexity.Venta.DescuentoPorcentaje(childComplexity), true

	case "Venta.dineroEntregadoEfectivo":
		if e.complexity.Venta.DineroEntregadoEfectivo == nil {
			break
		}

		return e.complexity.Venta.DineroEntregadoEfectivo(childComplexity), true

	case "Venta.dineroEntregadoTarjeta":
		if e.complexity.Venta.DineroEntregadoTarjeta == nil {
			break
		}

		return e.complexity.Venta.DineroEntregadoTarjeta(childComplexity), true

	case "Venta._id":
		if e.complexity.Venta.ID == nil {
			break
		}

		return e.complexity.Venta.ID(childComplexity), true

	case "Venta.modificadoPor":
		if e.complexity.Venta.ModificadoPor == nil {
			break
		}

		return e.complexity.Venta.ModificadoPor(childComplexity), true

	case "Venta.precioVentaTotal":
		if e.complexity.Venta.PrecioVentaTotal == nil {
			break
		}

		return e.complexity.Venta.PrecioVentaTotal(childComplexity), true

	case "Venta.precioVentaTotalSinDto":
		if e.complexity.Venta.PrecioVentaTotalSinDto == nil {
			break
		}

		return e.complexity.Venta.PrecioVentaTotalSinDto(childComplexity), true

	case "Venta.productos":
		if e.complexity.Venta.Productos == nil {
			break
		}

		return e.complexity.Venta.Productos(childComplexity), true

	case "Venta.tipo":
		if e.complexity.Venta.Tipo == nil {
			break
		}

		return e.complexity.Venta.Tipo(childComplexity), true

	case "Venta.tpv":
		if e.complexity.Venta.Tpv == nil {
			break
		}

		return e.complexity.Venta.Tpv(childComplexity), true

	case "Venta.updatedAt":
		if e.complexity.Venta.UpdatedAt == nil {
			break
		}

		return e.complexity.Venta.UpdatedAt(childComplexity), true

	case "Venta.vendidoPor":
		if e.complexity.Venta.VendidoPor == nil {
			break
		}

		return e.complexity.Venta.VendidoPor(childComplexity), true

	case "VentaMutationResponse.createdAt":
		if e.complexity.VentaMutationResponse.CreatedAt == nil {
			break
		}

		return e.complexity.VentaMutationResponse.CreatedAt(childComplexity), true

	case "VentaMutationResponse._id":
		if e.complexity.VentaMutationResponse.ID == nil {
			break
		}

		return e.complexity.VentaMutationResponse.ID(childComplexity), true

	case "VentaMutationResponse.message":
		if e.complexity.VentaMutationResponse.Message == nil {
			break
		}

		return e.complexity.VentaMutationResponse.Message(childComplexity), true

	case "VentaMutationResponse.successful":
		if e.complexity.VentaMutationResponse.Successful == nil {
			break
		}

		return e.complexity.VentaMutationResponse.Successful(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap(
		ec.unmarshalInputCierreTPVFind,
		ec.unmarshalInputCierreTPVInput,
		ec.unmarshalInputCierresTPVFind,
		ec.unmarshalInputClienteFind,
		ec.unmarshalInputClienteInput,
		ec.unmarshalInputClientesFind,
		ec.unmarshalInputCredentials,
		ec.unmarshalInputEmpleadoFind,
		ec.unmarshalInputEmpleadoInput,
		ec.unmarshalInputEmpleadosFind,
		ec.unmarshalInputProductoAddInput,
		ec.unmarshalInputProductoFind,
		ec.unmarshalInputProductoUpdateInput,
		ec.unmarshalInputProductoVendidoInput,
		ec.unmarshalInputProductosFind,
		ec.unmarshalInputTPVFind,
		ec.unmarshalInputTPVsFind,
		ec.unmarshalInputVentaFields,
		ec.unmarshalInputVentasFind,
	)
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "../schema.graphqls", Input: `# GraphQL schema example
#
# https://gqlgen.com/getting-started/


type LoginResult {
  message: String!
  success: Boolean!
  token: String
}

input Credentials {
  email: String!
  password: String!
}

type JwtValidationResult {
  validado: Boolean!
}

type Cliente {
  _id: ID!
  nif: String!
  nombre: String!
  calle: String!
  cp: String!
}

type ClienteMutationResponse {
  message: String!
  successful: Boolean!
}

input ClienteFind {
  _id: ID
  nif: String
}

input ClientesFind {
  _ids: [ID!]
  nombre: String
  query: String
}

type Empleado {
  _id: ID!
  nombre: String!
  apellidos: String!
  dni: String
  rol: String!
  genero: String
  email: String!
  horasPorSemana: Float
  fechaAlta: String
}

type EmpleadoMutationResponse {
  message: String!
  successful: Boolean!
}

input EmpleadoFind {
  _id: ID
  nombre: String
  dni: String
}

input EmpleadosFind {
  _ids: [ID!]
  nombre: String
  rol: String
  query: String
}

type ResponseMutation {
  message: String!
  successful: Boolean!
}

type Producto {
  _id: ID!
  nombre: String
  proveedor: String
  familia: String
  precioVenta: Float
  precioCompra: Float
  iva: Float
  margen: Float
  promociones: [String]
  ean: String
  cantidad: Int
  cantidadRestock: Int
  alta: Boolean
  img: String
  createdAt: String
  updatedAt: String
}

input ProductoFind {
  _id: ID
  nombre: String
  ean: String
}

input ProductosFind {
  _ids: [ID!]
  nombre: String
  familia: String
  proveedor: String
  query: String
}

input ProductoAddInput {
  nombre: String!
  proveedor: String
  familia: String
  precioVenta: Float!
  precioCompra: Float!
  iva: Float!
  margen: Float!
  promociones: [String]
  ean: String!
  cantidad: Int
  cantidadRestock: Int
  alta: Boolean!
  img: String
}

input ProductoUpdateInput {
  _id: ID!
  nombre: String
  proveedor: String
  familia: String
  precioVenta: Float
  precioCompra: Float
  iva: Float
  margen: Float
  promociones: [String]
  ean: String
  cantidad: Int
  cantidadRestock: Int
  alta: Boolean
  img: String
}

type ProductoMutationResponse {
  message: String!
  successful: Boolean!
}

type CierreTPV {
  _id: ID!,
  tpv: ID!,
  cajaInicial: Float,
  abiertoPor: Empleado,
  cerradoPor: Empleado,
  apertura: String,
  cierre: String,
  numVentas: Int,
  ventasEfectivo: Float,
  ventasTarjeta: Float,
  ventasTotales: Float,
  dineroEsperadoEnCaja: Float,
  dineroRealEnCaja: Float,
  dineroRetirado:Float,
  fondoDeCaja: Float,
  beneficio: Float,
  nota: String
}

input CierreTPVInput {
  _id: ID,
  tpv: ID!,
  cajaInicial: Float!,
  abiertoPor: EmpleadoInput!,
  cerradoPor: EmpleadoInput!,
  apertura: String!,
  cierre: String,
  numVentas: Int!
  ventasEfectivo: Float!,
  ventasTarjeta: Float!,
  ventasTotales: Float!,
  dineroEsperadoEnCaja: Float!,
  dineroRealEnCaja: Float!,
  dineroRetirado:Float!,
  fondoDeCaja: Float!,
  nota: String,
}

input EmpleadoInput {
  _id: ID!
  nombre: String!
  apellidos: String!
  dni: String
  rol: String!
  genero: String
  email: String!
  horasPorSemana: Float
  fechaAlta: String
}

type CierreTPVMutationResponse {
  message: String!
  successful: Boolean!
  token: String
  cierre: CierreTPV
}

input CierreTPVFind {
  _id: ID
  fecha: String
}

input CierresTPVFind {
  fecha: String
}

type TPV {
  _id: ID!
  nombre: String
  enUsoPor: Empleado
  libre: Boolean
  cajaInicial: Int
  createdAt: String
  updatedAt: String
}

type TPVMutationResponse {
  message: String!
  successful: Boolean!
}

type TPVMutationJwtResponse {
  token: String!
  successful: Boolean
}

input TPVFind {
  _id: ID
  nombre: String
  empleadoId: ID
}

input TPVsFind {
  libre: Boolean!
}

type Venta {
  _id: ID!
  productos: [ProductoVendido]
  dineroEntregadoEfectivo: Float
  dineroEntregadoTarjeta: Float
  precioVentaTotalSinDto: Float
  precioVentaTotal: Float
  cambio: Float
  cliente: Cliente
  vendidoPor: Empleado
  modificadoPor: Empleado
  tipo: String
  descuentoEfectivo: Float
  descuentoPorcentaje: Float
  tpv: ID
  createdAt: String
  updatedAt: String
}

type VentaMutationResponse {
  _id: String
  message: String!
  successful: Boolean!
  createdAt: String
} 

type ProductoVendido {
  _id: ID!
  nombre: String
  proveedor: String
  familia: String
  precioVenta: Float
  precioCompra: Float
  iva: Float
  margen: Float
  ean: String
  cantidadVendida: Int
  createdAt: String
  updatedAt: String
}

input ProductoVendidoInput {
  _id: ID!
  nombre: String
  proveedor: String
  familia: String
  precioVenta: Float
  precioCompra: Float
  iva: Float
  margen: Float
  ean: String
  cantidadVendida: Int
  createdAt: String
  updatedAt: String
  dto: Float
}

input VentasFind {
  _ids: [ID!]
  clienteId: String
  tipo: String
  vendedorId: String
  createdAt: String
  fechaInicial: String
  fechaFinal: String
  tpv: ID
  query: String
}

input ClienteInput {
  _id: ID!
  nif: String!
  nombre: String!
  calle: String!
  cp: String!
}

input VentaFields {
  productos: [ProductoVendidoInput]!
  dineroEntregadoEfectivo: Float!
  dineroEntregadoTarjeta: Float!
  precioVentaTotalSinDto: Float!
  precioVentaTotal: Float!
  cambio: Float!
  cliente: ClienteInput!
  vendidoPor: EmpleadoInput!
  modificadoPor: EmpleadoInput!
  tipo: String!
  descuentoEfectivo: Float!
  descuentoPorcentaje: Float!
  tpv: ID!
}

type Query {
  login(loginValues: Credentials!): LoginResult
  validateJwt(jwt: String!): JwtValidationResult
  cliente(find: ClienteFind!): Cliente
  clientes(find: ClientesFind, limit: Int): [Cliente]
  empleado(find: EmpleadoFind!): Empleado
  empleados(find: EmpleadosFind, limit: Int): [Empleado]
  producto(find: ProductoFind!): Producto
  productos(find: ProductosFind, limit: Int): [Producto]
  cierreTPV(find: CierreTPVFind!): CierreTPV
  cierresTPVs(find: CierresTPVFind, limit: Int): [CierreTPV]
  tpv(find: TPVFind!): TPV
  tpvs(find: TPVsFind, limit: Int): [TPV]
  venta(_id: ID!): Venta
  ventas(find: VentasFind, limit: Int, order: String, offset: Int): [Venta]
}

type Mutation {
  addCliente(nif: String!, nombre: String!, calle: String, cp: String): ClienteMutationResponse!,
  deleteCliente(_id: ID!): ClienteMutationResponse!,
  updateCliente(_id: ID!, nif: String, nombre: String, calle: String, cp: String): ClienteMutationResponse!,
  addEmpleado(nombre: String!, apellidos: String!, dni: String!, rol: String!, genero: String, email: String!): EmpleadoMutationResponse!,
  deleteEmpleado(_id: ID!): EmpleadoMutationResponse!,
  updateEmpleado(_id: ID!, nombre: String, apellidos: String, dni: String, rol: String, genero: String, email: String, horasPorSemana: Float, fechaAlta: String): EmpleadoMutationResponse!,
  addProductosFile(csv: String!): ResponseMutation!
  addClientesFile(csv: String!): ResponseMutation!
  addVentasFile(ventasJson: String!): ResponseMutation!
  addProducto(producto: ProductoAddInput!): ProductoMutationResponse!
  deleteProducto(_id: ID!): ProductoMutationResponse!
  updateProducto(producto: ProductoUpdateInput!): ProductoMutationResponse!
  addCierreTPV(cierre: CierreTPVInput!): CierreTPVMutationResponse!        
  deleteCierreTPV(_id: ID!): TPVMutationResponse!        
  updateCierreTPV(cierre: CierreTPVInput): CierreTPVMutationResponse!
  addTPV(nombre: String!, enUsoPor: ID, libre: Boolean, cajaInicial: Int): TPVMutationResponse!
  deleteTPV(_id: ID!): TPVMutationResponse!
  updateTPV(_id: ID!, nombre: String, enUsoPor: ID, libre: Boolean, cajaInicial: Int): TPVMutationResponse!
  ocupyTPV(idEmpleado: ID!, idTPV: ID!, cajaInicial: Float!): TPVMutationJwtResponse!
  freeTPV(idEmpleado: ID!, idTPV: ID!): TPVMutationJwtResponse!
  addVenta(fields: VentaFields!): VentaMutationResponse!
  deleteVenta(_id: ID!): VentaMutationResponse!
  updateVenta(_id: ID!, productos: [ProductoVendidoInput], dineroEntregadoEfectivo: Float, descuentoPorcentaje: Float, precioVentaTotal: Float!, cambio: Float,
  clienteId: ClienteInput, vendidoPor: EmpleadoInput, modificadoPor: EmpleadoInput, tipo: String, descuentoEfectivo: Float): VentaMutationResponse!
}






`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Mutation_addCierreTPV_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CierreTPVInput
	if tmp, ok := rawArgs["cierre"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cierre"))
		arg0, err = ec.unmarshalNCierreTPVInput2exampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐCierreTPVInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["cierre"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addCliente_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["nif"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nif"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["nif"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["nombre"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nombre"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["nombre"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["calle"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("calle"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["calle"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["cp"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cp"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["cp"] = arg3
	return args, nil
}

func (ec *executionContext) field_Mutation_addClientesFile_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["csv"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("csv"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["csv"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addEmpleado_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["nombre"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nombre"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["nombre"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["apellidos"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("apellidos"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["apellidos"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["dni"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dni"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["dni"] = arg2
	var arg3 string
	if tmp, ok := rawArgs["rol"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rol"))
		arg3, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["rol"] = arg3
	var arg4 *string
	if tmp, ok := rawArgs["genero"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("genero"))
		arg4, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["genero"] = arg4
	var arg5 string
	if tmp, ok := rawArgs["email"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
		arg5, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["email"] = arg5
	return args, nil
}

func (ec *executionContext) field_Mutation_addProducto_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ProductoAddInput
	if tmp, ok := rawArgs["producto"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("producto"))
		arg0, err = ec.unmarshalNProductoAddInput2exampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐProductoAddInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["producto"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addProductosFile_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["csv"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("csv"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["csv"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addTPV_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["nombre"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nombre"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["nombre"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["enUsoPor"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enUsoPor"))
		arg1, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["enUsoPor"] = arg1
	var arg2 *bool
	if tmp, ok := rawArgs["libre"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("libre"))
		arg2, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["libre"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["cajaInicial"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cajaInicial"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["cajaInicial"] = arg3
	return args, nil
}

func (ec *executionContext) field_Mutation_addVenta_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.VentaFields
	if tmp, ok := rawArgs["fields"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fields"))
		arg0, err = ec.unmarshalNVentaFields2exampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐVentaFields(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["fields"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addVentasFile_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["ventasJson"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ventasJson"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ventasJson"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteCierreTPV_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteCliente_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteEmpleado_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteProducto_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteTPV_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteVenta_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_freeTPV_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["idEmpleado"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idEmpleado"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["idEmpleado"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["idTPV"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idTPV"))
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["idTPV"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_ocupyTPV_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["idEmpleado"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idEmpleado"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["idEmpleado"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["idTPV"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idTPV"))
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["idTPV"] = arg1
	var arg2 float64
	if tmp, ok := rawArgs["cajaInicial"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cajaInicial"))
		arg2, err = ec.unmarshalNFloat2float64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["cajaInicial"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_updateCierreTPV_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.CierreTPVInput
	if tmp, ok := rawArgs["cierre"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cierre"))
		arg0, err = ec.unmarshalOCierreTPVInput2ᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐCierreTPVInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["cierre"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateCliente_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_id"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["nif"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nif"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["nif"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["nombre"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nombre"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["nombre"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["calle"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("calle"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["calle"] = arg3
	var arg4 *string
	if tmp, ok := rawArgs["cp"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cp"))
		arg4, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["cp"] = arg4
	return args, nil
}

func (ec *executionContext) field_Mutation_updateEmpleado_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_id"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["nombre"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nombre"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["nombre"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["apellidos"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("apellidos"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["apellidos"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["dni"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dni"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["dni"] = arg3
	var arg4 *string
	if tmp, ok := rawArgs["rol"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rol"))
		arg4, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["rol"] = arg4
	var arg5 *string
	if tmp, ok := rawArgs["genero"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("genero"))
		arg5, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["genero"] = arg5
	var arg6 *string
	if tmp, ok := rawArgs["email"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
		arg6, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["email"] = arg6
	var arg7 *float64
	if tmp, ok := rawArgs["horasPorSemana"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("horasPorSemana"))
		arg7, err = ec.unmarshalOFloat2ᚖfloat64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["horasPorSemana"] = arg7
	var arg8 *string
	if tmp, ok := rawArgs["fechaAlta"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fechaAlta"))
		arg8, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["fechaAlta"] = arg8
	return args, nil
}

func (ec *executionContext) field_Mutation_updateProducto_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ProductoUpdateInput
	if tmp, ok := rawArgs["producto"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("producto"))
		arg0, err = ec.unmarshalNProductoUpdateInput2exampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐProductoUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["producto"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateTPV_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_id"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["nombre"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nombre"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["nombre"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["enUsoPor"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enUsoPor"))
		arg2, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["enUsoPor"] = arg2
	var arg3 *bool
	if tmp, ok := rawArgs["libre"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("libre"))
		arg3, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["libre"] = arg3
	var arg4 *int
	if tmp, ok := rawArgs["cajaInicial"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cajaInicial"))
		arg4, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["cajaInicial"] = arg4
	return args, nil
}

func (ec *executionContext) field_Mutation_updateVenta_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_id"] = arg0
	var arg1 []*model.ProductoVendidoInput
	if tmp, ok := rawArgs["productos"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("productos"))
		arg1, err = ec.unmarshalOProductoVendidoInput2ᚕᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐProductoVendidoInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["productos"] = arg1
	var arg2 *float64
	if tmp, ok := rawArgs["dineroEntregadoEfectivo"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dineroEntregadoEfectivo"))
		arg2, err = ec.unmarshalOFloat2ᚖfloat64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["dineroEntregadoEfectivo"] = arg2
	var arg3 *float64
	if tmp, ok := rawArgs["descuentoPorcentaje"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descuentoPorcentaje"))
		arg3, err = ec.unmarshalOFloat2ᚖfloat64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["descuentoPorcentaje"] = arg3
	var arg4 float64
	if tmp, ok := rawArgs["precioVentaTotal"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("precioVentaTotal"))
		arg4, err = ec.unmarshalNFloat2float64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["precioVentaTotal"] = arg4
	var arg5 *float64
	if tmp, ok := rawArgs["cambio"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cambio"))
		arg5, err = ec.unmarshalOFloat2ᚖfloat64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["cambio"] = arg5
	var arg6 *model.ClienteInput
	if tmp, ok := rawArgs["clienteId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clienteId"))
		arg6, err = ec.unmarshalOClienteInput2ᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐClienteInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["clienteId"] = arg6
	var arg7 *model.EmpleadoInput
	if tmp, ok := rawArgs["vendidoPor"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vendidoPor"))
		arg7, err = ec.unmarshalOEmpleadoInput2ᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐEmpleadoInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["vendidoPor"] = arg7
	var arg8 *model.EmpleadoInput
	if tmp, ok := rawArgs["modificadoPor"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("modificadoPor"))
		arg8, err = ec.unmarshalOEmpleadoInput2ᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐEmpleadoInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["modificadoPor"] = arg8
	var arg9 *string
	if tmp, ok := rawArgs["tipo"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tipo"))
		arg9, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["tipo"] = arg9
	var arg10 *float64
	if tmp, ok := rawArgs["descuentoEfectivo"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descuentoEfectivo"))
		arg10, err = ec.unmarshalOFloat2ᚖfloat64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["descuentoEfectivo"] = arg10
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_cierreTPV_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CierreTPVFind
	if tmp, ok := rawArgs["find"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("find"))
		arg0, err = ec.unmarshalNCierreTPVFind2exampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐCierreTPVFind(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["find"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_cierresTPVs_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.CierresTPVFind
	if tmp, ok := rawArgs["find"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("find"))
		arg0, err = ec.unmarshalOCierresTPVFind2ᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐCierresTPVFind(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["find"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_cliente_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ClienteFind
	if tmp, ok := rawArgs["find"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("find"))
		arg0, err = ec.unmarshalNClienteFind2exampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐClienteFind(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["find"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_clientes_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ClientesFind
	if tmp, ok := rawArgs["find"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("find"))
		arg0, err = ec.unmarshalOClientesFind2ᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐClientesFind(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["find"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_empleado_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.EmpleadoFind
	if tmp, ok := rawArgs["find"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("find"))
		arg0, err = ec.unmarshalNEmpleadoFind2exampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐEmpleadoFind(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["find"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_empleados_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.EmpleadosFind
	if tmp, ok := rawArgs["find"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("find"))
		arg0, err = ec.unmarshalOEmpleadosFind2ᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐEmpleadosFind(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["find"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_login_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.Credentials
	if tmp, ok := rawArgs["loginValues"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("loginValues"))
		arg0, err = ec.unmarshalNCredentials2exampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐCredentials(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["loginValues"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_producto_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ProductoFind
	if tmp, ok := rawArgs["find"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("find"))
		arg0, err = ec.unmarshalNProductoFind2exampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐProductoFind(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["find"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_productos_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ProductosFind
	if tmp, ok := rawArgs["find"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("find"))
		arg0, err = ec.unmarshalOProductosFind2ᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐProductosFind(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["find"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_tpv_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.TPVFind
	if tmp, ok := rawArgs["find"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("find"))
		arg0, err = ec.unmarshalNTPVFind2exampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐTPVFind(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["find"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_tpvs_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.TPVsFind
	if tmp, ok := rawArgs["find"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("find"))
		arg0, err = ec.unmarshalOTPVsFind2ᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐTPVsFind(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["find"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_validateJwt_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["jwt"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("jwt"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["jwt"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_venta_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_ventas_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.VentasFind
	if tmp, ok := rawArgs["find"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("find"))
		arg0, err = ec.unmarshalOVentasFind2ᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐVentasFind(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["find"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _CierreTPV__id(ctx context.Context, field graphql.CollectedField, obj *model.CierreTpv) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CierreTPV__id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CierreTPV__id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CierreTPV",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CierreTPV_tpv(ctx context.Context, field graphql.CollectedField, obj *model.CierreTpv) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CierreTPV_tpv(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tpv, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CierreTPV_tpv(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CierreTPV",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CierreTPV_cajaInicial(ctx context.Context, field graphql.CollectedField, obj *model.CierreTpv) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CierreTPV_cajaInicial(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CajaInicial, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CierreTPV_cajaInicial(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CierreTPV",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CierreTPV_abiertoPor(ctx context.Context, field graphql.CollectedField, obj *model.CierreTpv) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CierreTPV_abiertoPor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AbiertoPor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Empleado)
	fc.Result = res
	return ec.marshalOEmpleado2ᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐEmpleado(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CierreTPV_abiertoPor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CierreTPV",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_id":
				return ec.fieldContext_Empleado__id(ctx, field)
			case "nombre":
				return ec.fieldContext_Empleado_nombre(ctx, field)
			case "apellidos":
				return ec.fieldContext_Empleado_apellidos(ctx, field)
			case "dni":
				return ec.fieldContext_Empleado_dni(ctx, field)
			case "rol":
				return ec.fieldContext_Empleado_rol(ctx, field)
			case "genero":
				return ec.fieldContext_Empleado_genero(ctx, field)
			case "email":
				return ec.fieldContext_Empleado_email(ctx, field)
			case "horasPorSemana":
				return ec.fieldContext_Empleado_horasPorSemana(ctx, field)
			case "fechaAlta":
				return ec.fieldContext_Empleado_fechaAlta(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Empleado", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CierreTPV_cerradoPor(ctx context.Context, field graphql.CollectedField, obj *model.CierreTpv) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CierreTPV_cerradoPor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CerradoPor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Empleado)
	fc.Result = res
	return ec.marshalOEmpleado2ᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐEmpleado(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CierreTPV_cerradoPor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CierreTPV",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_id":
				return ec.fieldContext_Empleado__id(ctx, field)
			case "nombre":
				return ec.fieldContext_Empleado_nombre(ctx, field)
			case "apellidos":
				return ec.fieldContext_Empleado_apellidos(ctx, field)
			case "dni":
				return ec.fieldContext_Empleado_dni(ctx, field)
			case "rol":
				return ec.fieldContext_Empleado_rol(ctx, field)
			case "genero":
				return ec.fieldContext_Empleado_genero(ctx, field)
			case "email":
				return ec.fieldContext_Empleado_email(ctx, field)
			case "horasPorSemana":
				return ec.fieldContext_Empleado_horasPorSemana(ctx, field)
			case "fechaAlta":
				return ec.fieldContext_Empleado_fechaAlta(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Empleado", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CierreTPV_apertura(ctx context.Context, field graphql.CollectedField, obj *model.CierreTpv) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CierreTPV_apertura(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Apertura, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CierreTPV_apertura(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CierreTPV",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CierreTPV_cierre(ctx context.Context, field graphql.CollectedField, obj *model.CierreTpv) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CierreTPV_cierre(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cierre, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CierreTPV_cierre(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CierreTPV",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CierreTPV_numVentas(ctx context.Context, field graphql.CollectedField, obj *model.CierreTpv) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CierreTPV_numVentas(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumVentas, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CierreTPV_numVentas(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CierreTPV",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CierreTPV_ventasEfectivo(ctx context.Context, field graphql.CollectedField, obj *model.CierreTpv) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CierreTPV_ventasEfectivo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VentasEfectivo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CierreTPV_ventasEfectivo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CierreTPV",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CierreTPV_ventasTarjeta(ctx context.Context, field graphql.CollectedField, obj *model.CierreTpv) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CierreTPV_ventasTarjeta(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VentasTarjeta, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CierreTPV_ventasTarjeta(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CierreTPV",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CierreTPV_ventasTotales(ctx context.Context, field graphql.CollectedField, obj *model.CierreTpv) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CierreTPV_ventasTotales(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VentasTotales, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CierreTPV_ventasTotales(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CierreTPV",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CierreTPV_dineroEsperadoEnCaja(ctx context.Context, field graphql.CollectedField, obj *model.CierreTpv) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CierreTPV_dineroEsperadoEnCaja(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DineroEsperadoEnCaja, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CierreTPV_dineroEsperadoEnCaja(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CierreTPV",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CierreTPV_dineroRealEnCaja(ctx context.Context, field graphql.CollectedField, obj *model.CierreTpv) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CierreTPV_dineroRealEnCaja(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DineroRealEnCaja, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CierreTPV_dineroRealEnCaja(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CierreTPV",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CierreTPV_dineroRetirado(ctx context.Context, field graphql.CollectedField, obj *model.CierreTpv) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CierreTPV_dineroRetirado(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DineroRetirado, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CierreTPV_dineroRetirado(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CierreTPV",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CierreTPV_fondoDeCaja(ctx context.Context, field graphql.CollectedField, obj *model.CierreTpv) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CierreTPV_fondoDeCaja(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FondoDeCaja, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CierreTPV_fondoDeCaja(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CierreTPV",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CierreTPV_beneficio(ctx context.Context, field graphql.CollectedField, obj *model.CierreTpv) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CierreTPV_beneficio(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Beneficio, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CierreTPV_beneficio(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CierreTPV",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CierreTPV_nota(ctx context.Context, field graphql.CollectedField, obj *model.CierreTpv) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CierreTPV_nota(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nota, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CierreTPV_nota(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CierreTPV",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CierreTPVMutationResponse_message(ctx context.Context, field graphql.CollectedField, obj *model.CierreTPVMutationResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CierreTPVMutationResponse_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CierreTPVMutationResponse_message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CierreTPVMutationResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CierreTPVMutationResponse_successful(ctx context.Context, field graphql.CollectedField, obj *model.CierreTPVMutationResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CierreTPVMutationResponse_successful(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Successful, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CierreTPVMutationResponse_successful(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CierreTPVMutationResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CierreTPVMutationResponse_token(ctx context.Context, field graphql.CollectedField, obj *model.CierreTPVMutationResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CierreTPVMutationResponse_token(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Token, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CierreTPVMutationResponse_token(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CierreTPVMutationResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CierreTPVMutationResponse_cierre(ctx context.Context, field graphql.CollectedField, obj *model.CierreTPVMutationResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CierreTPVMutationResponse_cierre(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cierre, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CierreTpv)
	fc.Result = res
	return ec.marshalOCierreTPV2ᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐCierreTpv(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CierreTPVMutationResponse_cierre(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CierreTPVMutationResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_id":
				return ec.fieldContext_CierreTPV__id(ctx, field)
			case "tpv":
				return ec.fieldContext_CierreTPV_tpv(ctx, field)
			case "cajaInicial":
				return ec.fieldContext_CierreTPV_cajaInicial(ctx, field)
			case "abiertoPor":
				return ec.fieldContext_CierreTPV_abiertoPor(ctx, field)
			case "cerradoPor":
				return ec.fieldContext_CierreTPV_cerradoPor(ctx, field)
			case "apertura":
				return ec.fieldContext_CierreTPV_apertura(ctx, field)
			case "cierre":
				return ec.fieldContext_CierreTPV_cierre(ctx, field)
			case "numVentas":
				return ec.fieldContext_CierreTPV_numVentas(ctx, field)
			case "ventasEfectivo":
				return ec.fieldContext_CierreTPV_ventasEfectivo(ctx, field)
			case "ventasTarjeta":
				return ec.fieldContext_CierreTPV_ventasTarjeta(ctx, field)
			case "ventasTotales":
				return ec.fieldContext_CierreTPV_ventasTotales(ctx, field)
			case "dineroEsperadoEnCaja":
				return ec.fieldContext_CierreTPV_dineroEsperadoEnCaja(ctx, field)
			case "dineroRealEnCaja":
				return ec.fieldContext_CierreTPV_dineroRealEnCaja(ctx, field)
			case "dineroRetirado":
				return ec.fieldContext_CierreTPV_dineroRetirado(ctx, field)
			case "fondoDeCaja":
				return ec.fieldContext_CierreTPV_fondoDeCaja(ctx, field)
			case "beneficio":
				return ec.fieldContext_CierreTPV_beneficio(ctx, field)
			case "nota":
				return ec.fieldContext_CierreTPV_nota(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CierreTPV", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Cliente__id(ctx context.Context, field graphql.CollectedField, obj *model.Cliente) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Cliente__id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Cliente__id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Cliente",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Cliente_nif(ctx context.Context, field graphql.CollectedField, obj *model.Cliente) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Cliente_nif(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nif, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Cliente_nif(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Cliente",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Cliente_nombre(ctx context.Context, field graphql.CollectedField, obj *model.Cliente) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Cliente_nombre(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nombre, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Cliente_nombre(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Cliente",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Cliente_calle(ctx context.Context, field graphql.CollectedField, obj *model.Cliente) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Cliente_calle(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Calle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Cliente_calle(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Cliente",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Cliente_cp(ctx context.Context, field graphql.CollectedField, obj *model.Cliente) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Cliente_cp(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Cliente_cp(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Cliente",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClienteMutationResponse_message(ctx context.Context, field graphql.CollectedField, obj *model.ClienteMutationResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClienteMutationResponse_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClienteMutationResponse_message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClienteMutationResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClienteMutationResponse_successful(ctx context.Context, field graphql.CollectedField, obj *model.ClienteMutationResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClienteMutationResponse_successful(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Successful, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClienteMutationResponse_successful(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClienteMutationResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Empleado__id(ctx context.Context, field graphql.CollectedField, obj *model.Empleado) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Empleado__id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Empleado__id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Empleado",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Empleado_nombre(ctx context.Context, field graphql.CollectedField, obj *model.Empleado) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Empleado_nombre(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nombre, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Empleado_nombre(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Empleado",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Empleado_apellidos(ctx context.Context, field graphql.CollectedField, obj *model.Empleado) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Empleado_apellidos(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Apellidos, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Empleado_apellidos(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Empleado",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Empleado_dni(ctx context.Context, field graphql.CollectedField, obj *model.Empleado) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Empleado_dni(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Dni, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Empleado_dni(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Empleado",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Empleado_rol(ctx context.Context, field graphql.CollectedField, obj *model.Empleado) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Empleado_rol(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Rol, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Empleado_rol(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Empleado",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Empleado_genero(ctx context.Context, field graphql.CollectedField, obj *model.Empleado) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Empleado_genero(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Genero, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Empleado_genero(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Empleado",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Empleado_email(ctx context.Context, field graphql.CollectedField, obj *model.Empleado) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Empleado_email(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Empleado_email(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Empleado",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Empleado_horasPorSemana(ctx context.Context, field graphql.CollectedField, obj *model.Empleado) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Empleado_horasPorSemana(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HorasPorSemana, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Empleado_horasPorSemana(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Empleado",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Empleado_fechaAlta(ctx context.Context, field graphql.CollectedField, obj *model.Empleado) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Empleado_fechaAlta(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FechaAlta, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Empleado_fechaAlta(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Empleado",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EmpleadoMutationResponse_message(ctx context.Context, field graphql.CollectedField, obj *model.EmpleadoMutationResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EmpleadoMutationResponse_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EmpleadoMutationResponse_message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EmpleadoMutationResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EmpleadoMutationResponse_successful(ctx context.Context, field graphql.CollectedField, obj *model.EmpleadoMutationResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EmpleadoMutationResponse_successful(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Successful, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EmpleadoMutationResponse_successful(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EmpleadoMutationResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JwtValidationResult_validado(ctx context.Context, field graphql.CollectedField, obj *model.JwtValidationResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JwtValidationResult_validado(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Validado, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JwtValidationResult_validado(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JwtValidationResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LoginResult_message(ctx context.Context, field graphql.CollectedField, obj *model.LoginResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LoginResult_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LoginResult_message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LoginResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LoginResult_success(ctx context.Context, field graphql.CollectedField, obj *model.LoginResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LoginResult_success(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Success, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LoginResult_success(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LoginResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LoginResult_token(ctx context.Context, field graphql.CollectedField, obj *model.LoginResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LoginResult_token(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Token, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LoginResult_token(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LoginResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_addCliente(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_addCliente(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddCliente(rctx, fc.Args["nif"].(string), fc.Args["nombre"].(string), fc.Args["calle"].(*string), fc.Args["cp"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ClienteMutationResponse)
	fc.Result = res
	return ec.marshalNClienteMutationResponse2ᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐClienteMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_addCliente(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "message":
				return ec.fieldContext_ClienteMutationResponse_message(ctx, field)
			case "successful":
				return ec.fieldContext_ClienteMutationResponse_successful(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ClienteMutationResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_addCliente_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteCliente(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteCliente(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteCliente(rctx, fc.Args["_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ClienteMutationResponse)
	fc.Result = res
	return ec.marshalNClienteMutationResponse2ᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐClienteMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteCliente(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "message":
				return ec.fieldContext_ClienteMutationResponse_message(ctx, field)
			case "successful":
				return ec.fieldContext_ClienteMutationResponse_successful(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ClienteMutationResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteCliente_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateCliente(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateCliente(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateCliente(rctx, fc.Args["_id"].(string), fc.Args["nif"].(*string), fc.Args["nombre"].(*string), fc.Args["calle"].(*string), fc.Args["cp"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ClienteMutationResponse)
	fc.Result = res
	return ec.marshalNClienteMutationResponse2ᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐClienteMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateCliente(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "message":
				return ec.fieldContext_ClienteMutationResponse_message(ctx, field)
			case "successful":
				return ec.fieldContext_ClienteMutationResponse_successful(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ClienteMutationResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateCliente_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_addEmpleado(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_addEmpleado(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddEmpleado(rctx, fc.Args["nombre"].(string), fc.Args["apellidos"].(string), fc.Args["dni"].(string), fc.Args["rol"].(string), fc.Args["genero"].(*string), fc.Args["email"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.EmpleadoMutationResponse)
	fc.Result = res
	return ec.marshalNEmpleadoMutationResponse2ᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐEmpleadoMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_addEmpleado(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "message":
				return ec.fieldContext_EmpleadoMutationResponse_message(ctx, field)
			case "successful":
				return ec.fieldContext_EmpleadoMutationResponse_successful(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type EmpleadoMutationResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_addEmpleado_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteEmpleado(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteEmpleado(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteEmpleado(rctx, fc.Args["_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.EmpleadoMutationResponse)
	fc.Result = res
	return ec.marshalNEmpleadoMutationResponse2ᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐEmpleadoMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteEmpleado(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "message":
				return ec.fieldContext_EmpleadoMutationResponse_message(ctx, field)
			case "successful":
				return ec.fieldContext_EmpleadoMutationResponse_successful(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type EmpleadoMutationResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteEmpleado_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateEmpleado(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateEmpleado(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateEmpleado(rctx, fc.Args["_id"].(string), fc.Args["nombre"].(*string), fc.Args["apellidos"].(*string), fc.Args["dni"].(*string), fc.Args["rol"].(*string), fc.Args["genero"].(*string), fc.Args["email"].(*string), fc.Args["horasPorSemana"].(*float64), fc.Args["fechaAlta"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.EmpleadoMutationResponse)
	fc.Result = res
	return ec.marshalNEmpleadoMutationResponse2ᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐEmpleadoMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateEmpleado(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "message":
				return ec.fieldContext_EmpleadoMutationResponse_message(ctx, field)
			case "successful":
				return ec.fieldContext_EmpleadoMutationResponse_successful(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type EmpleadoMutationResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateEmpleado_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_addProductosFile(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_addProductosFile(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddProductosFile(rctx, fc.Args["csv"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ResponseMutation)
	fc.Result = res
	return ec.marshalNResponseMutation2ᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐResponseMutation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_addProductosFile(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "message":
				return ec.fieldContext_ResponseMutation_message(ctx, field)
			case "successful":
				return ec.fieldContext_ResponseMutation_successful(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ResponseMutation", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_addProductosFile_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_addClientesFile(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_addClientesFile(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddClientesFile(rctx, fc.Args["csv"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ResponseMutation)
	fc.Result = res
	return ec.marshalNResponseMutation2ᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐResponseMutation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_addClientesFile(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "message":
				return ec.fieldContext_ResponseMutation_message(ctx, field)
			case "successful":
				return ec.fieldContext_ResponseMutation_successful(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ResponseMutation", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_addClientesFile_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_addVentasFile(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_addVentasFile(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddVentasFile(rctx, fc.Args["ventasJson"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ResponseMutation)
	fc.Result = res
	return ec.marshalNResponseMutation2ᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐResponseMutation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_addVentasFile(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "message":
				return ec.fieldContext_ResponseMutation_message(ctx, field)
			case "successful":
				return ec.fieldContext_ResponseMutation_successful(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ResponseMutation", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_addVentasFile_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_addProducto(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_addProducto(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddProducto(rctx, fc.Args["producto"].(model.ProductoAddInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ProductoMutationResponse)
	fc.Result = res
	return ec.marshalNProductoMutationResponse2ᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐProductoMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_addProducto(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "message":
				return ec.fieldContext_ProductoMutationResponse_message(ctx, field)
			case "successful":
				return ec.fieldContext_ProductoMutationResponse_successful(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProductoMutationResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_addProducto_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteProducto(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteProducto(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteProducto(rctx, fc.Args["_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ProductoMutationResponse)
	fc.Result = res
	return ec.marshalNProductoMutationResponse2ᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐProductoMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteProducto(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "message":
				return ec.fieldContext_ProductoMutationResponse_message(ctx, field)
			case "successful":
				return ec.fieldContext_ProductoMutationResponse_successful(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProductoMutationResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteProducto_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateProducto(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateProducto(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateProducto(rctx, fc.Args["producto"].(model.ProductoUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ProductoMutationResponse)
	fc.Result = res
	return ec.marshalNProductoMutationResponse2ᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐProductoMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateProducto(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "message":
				return ec.fieldContext_ProductoMutationResponse_message(ctx, field)
			case "successful":
				return ec.fieldContext_ProductoMutationResponse_successful(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProductoMutationResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateProducto_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_addCierreTPV(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_addCierreTPV(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddCierreTpv(rctx, fc.Args["cierre"].(model.CierreTPVInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CierreTPVMutationResponse)
	fc.Result = res
	return ec.marshalNCierreTPVMutationResponse2ᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐCierreTPVMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_addCierreTPV(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "message":
				return ec.fieldContext_CierreTPVMutationResponse_message(ctx, field)
			case "successful":
				return ec.fieldContext_CierreTPVMutationResponse_successful(ctx, field)
			case "token":
				return ec.fieldContext_CierreTPVMutationResponse_token(ctx, field)
			case "cierre":
				return ec.fieldContext_CierreTPVMutationResponse_cierre(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CierreTPVMutationResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_addCierreTPV_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteCierreTPV(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteCierreTPV(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteCierreTpv(rctx, fc.Args["_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.TPVMutationResponse)
	fc.Result = res
	return ec.marshalNTPVMutationResponse2ᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐTPVMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteCierreTPV(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "message":
				return ec.fieldContext_TPVMutationResponse_message(ctx, field)
			case "successful":
				return ec.fieldContext_TPVMutationResponse_successful(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TPVMutationResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteCierreTPV_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateCierreTPV(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateCierreTPV(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateCierreTpv(rctx, fc.Args["cierre"].(*model.CierreTPVInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CierreTPVMutationResponse)
	fc.Result = res
	return ec.marshalNCierreTPVMutationResponse2ᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐCierreTPVMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateCierreTPV(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "message":
				return ec.fieldContext_CierreTPVMutationResponse_message(ctx, field)
			case "successful":
				return ec.fieldContext_CierreTPVMutationResponse_successful(ctx, field)
			case "token":
				return ec.fieldContext_CierreTPVMutationResponse_token(ctx, field)
			case "cierre":
				return ec.fieldContext_CierreTPVMutationResponse_cierre(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CierreTPVMutationResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateCierreTPV_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_addTPV(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_addTPV(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddTpv(rctx, fc.Args["nombre"].(string), fc.Args["enUsoPor"].(*string), fc.Args["libre"].(*bool), fc.Args["cajaInicial"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.TPVMutationResponse)
	fc.Result = res
	return ec.marshalNTPVMutationResponse2ᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐTPVMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_addTPV(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "message":
				return ec.fieldContext_TPVMutationResponse_message(ctx, field)
			case "successful":
				return ec.fieldContext_TPVMutationResponse_successful(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TPVMutationResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_addTPV_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteTPV(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteTPV(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteTpv(rctx, fc.Args["_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.TPVMutationResponse)
	fc.Result = res
	return ec.marshalNTPVMutationResponse2ᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐTPVMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteTPV(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "message":
				return ec.fieldContext_TPVMutationResponse_message(ctx, field)
			case "successful":
				return ec.fieldContext_TPVMutationResponse_successful(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TPVMutationResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteTPV_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateTPV(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateTPV(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateTpv(rctx, fc.Args["_id"].(string), fc.Args["nombre"].(*string), fc.Args["enUsoPor"].(*string), fc.Args["libre"].(*bool), fc.Args["cajaInicial"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.TPVMutationResponse)
	fc.Result = res
	return ec.marshalNTPVMutationResponse2ᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐTPVMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateTPV(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "message":
				return ec.fieldContext_TPVMutationResponse_message(ctx, field)
			case "successful":
				return ec.fieldContext_TPVMutationResponse_successful(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TPVMutationResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateTPV_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_ocupyTPV(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_ocupyTPV(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().OcupyTpv(rctx, fc.Args["idEmpleado"].(string), fc.Args["idTPV"].(string), fc.Args["cajaInicial"].(float64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.TPVMutationJwtResponse)
	fc.Result = res
	return ec.marshalNTPVMutationJwtResponse2ᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐTPVMutationJwtResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_ocupyTPV(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "token":
				return ec.fieldContext_TPVMutationJwtResponse_token(ctx, field)
			case "successful":
				return ec.fieldContext_TPVMutationJwtResponse_successful(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TPVMutationJwtResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_ocupyTPV_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_freeTPV(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_freeTPV(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().FreeTpv(rctx, fc.Args["idEmpleado"].(string), fc.Args["idTPV"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.TPVMutationJwtResponse)
	fc.Result = res
	return ec.marshalNTPVMutationJwtResponse2ᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐTPVMutationJwtResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_freeTPV(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "token":
				return ec.fieldContext_TPVMutationJwtResponse_token(ctx, field)
			case "successful":
				return ec.fieldContext_TPVMutationJwtResponse_successful(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TPVMutationJwtResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_freeTPV_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_addVenta(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_addVenta(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddVenta(rctx, fc.Args["fields"].(model.VentaFields))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.VentaMutationResponse)
	fc.Result = res
	return ec.marshalNVentaMutationResponse2ᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐVentaMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_addVenta(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_id":
				return ec.fieldContext_VentaMutationResponse__id(ctx, field)
			case "message":
				return ec.fieldContext_VentaMutationResponse_message(ctx, field)
			case "successful":
				return ec.fieldContext_VentaMutationResponse_successful(ctx, field)
			case "createdAt":
				return ec.fieldContext_VentaMutationResponse_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type VentaMutationResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_addVenta_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteVenta(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteVenta(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteVenta(rctx, fc.Args["_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.VentaMutationResponse)
	fc.Result = res
	return ec.marshalNVentaMutationResponse2ᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐVentaMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteVenta(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_id":
				return ec.fieldContext_VentaMutationResponse__id(ctx, field)
			case "message":
				return ec.fieldContext_VentaMutationResponse_message(ctx, field)
			case "successful":
				return ec.fieldContext_VentaMutationResponse_successful(ctx, field)
			case "createdAt":
				return ec.fieldContext_VentaMutationResponse_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type VentaMutationResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteVenta_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateVenta(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateVenta(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateVenta(rctx, fc.Args["_id"].(string), fc.Args["productos"].([]*model.ProductoVendidoInput), fc.Args["dineroEntregadoEfectivo"].(*float64), fc.Args["descuentoPorcentaje"].(*float64), fc.Args["precioVentaTotal"].(float64), fc.Args["cambio"].(*float64), fc.Args["clienteId"].(*model.ClienteInput), fc.Args["vendidoPor"].(*model.EmpleadoInput), fc.Args["modificadoPor"].(*model.EmpleadoInput), fc.Args["tipo"].(*string), fc.Args["descuentoEfectivo"].(*float64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.VentaMutationResponse)
	fc.Result = res
	return ec.marshalNVentaMutationResponse2ᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐVentaMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateVenta(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_id":
				return ec.fieldContext_VentaMutationResponse__id(ctx, field)
			case "message":
				return ec.fieldContext_VentaMutationResponse_message(ctx, field)
			case "successful":
				return ec.fieldContext_VentaMutationResponse_successful(ctx, field)
			case "createdAt":
				return ec.fieldContext_VentaMutationResponse_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type VentaMutationResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateVenta_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Producto__id(ctx context.Context, field graphql.CollectedField, obj *model.Producto) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Producto__id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Producto__id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Producto",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Producto_nombre(ctx context.Context, field graphql.CollectedField, obj *model.Producto) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Producto_nombre(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nombre, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Producto_nombre(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Producto",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Producto_proveedor(ctx context.Context, field graphql.CollectedField, obj *model.Producto) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Producto_proveedor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Proveedor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Producto_proveedor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Producto",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Producto_familia(ctx context.Context, field graphql.CollectedField, obj *model.Producto) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Producto_familia(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Familia, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Producto_familia(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Producto",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Producto_precioVenta(ctx context.Context, field graphql.CollectedField, obj *model.Producto) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Producto_precioVenta(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PrecioVenta, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Producto_precioVenta(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Producto",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Producto_precioCompra(ctx context.Context, field graphql.CollectedField, obj *model.Producto) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Producto_precioCompra(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PrecioCompra, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Producto_precioCompra(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Producto",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Producto_iva(ctx context.Context, field graphql.CollectedField, obj *model.Producto) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Producto_iva(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Iva, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Producto_iva(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Producto",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Producto_margen(ctx context.Context, field graphql.CollectedField, obj *model.Producto) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Producto_margen(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Margen, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Producto_margen(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Producto",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Producto_promociones(ctx context.Context, field graphql.CollectedField, obj *model.Producto) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Producto_promociones(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Promociones, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Producto_promociones(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Producto",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Producto_ean(ctx context.Context, field graphql.CollectedField, obj *model.Producto) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Producto_ean(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ean, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Producto_ean(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Producto",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Producto_cantidad(ctx context.Context, field graphql.CollectedField, obj *model.Producto) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Producto_cantidad(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cantidad, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Producto_cantidad(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Producto",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Producto_cantidadRestock(ctx context.Context, field graphql.CollectedField, obj *model.Producto) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Producto_cantidadRestock(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CantidadRestock, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Producto_cantidadRestock(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Producto",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Producto_alta(ctx context.Context, field graphql.CollectedField, obj *model.Producto) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Producto_alta(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Alta, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Producto_alta(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Producto",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Producto_img(ctx context.Context, field graphql.CollectedField, obj *model.Producto) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Producto_img(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Img, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Producto_img(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Producto",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Producto_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Producto) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Producto_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Producto_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Producto",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Producto_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.Producto) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Producto_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Producto_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Producto",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductoMutationResponse_message(ctx context.Context, field graphql.CollectedField, obj *model.ProductoMutationResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductoMutationResponse_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductoMutationResponse_message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductoMutationResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductoMutationResponse_successful(ctx context.Context, field graphql.CollectedField, obj *model.ProductoMutationResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductoMutationResponse_successful(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Successful, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductoMutationResponse_successful(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductoMutationResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductoVendido__id(ctx context.Context, field graphql.CollectedField, obj *model.ProductoVendido) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductoVendido__id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductoVendido__id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductoVendido",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductoVendido_nombre(ctx context.Context, field graphql.CollectedField, obj *model.ProductoVendido) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductoVendido_nombre(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nombre, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductoVendido_nombre(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductoVendido",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductoVendido_proveedor(ctx context.Context, field graphql.CollectedField, obj *model.ProductoVendido) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductoVendido_proveedor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Proveedor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductoVendido_proveedor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductoVendido",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductoVendido_familia(ctx context.Context, field graphql.CollectedField, obj *model.ProductoVendido) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductoVendido_familia(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Familia, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductoVendido_familia(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductoVendido",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductoVendido_precioVenta(ctx context.Context, field graphql.CollectedField, obj *model.ProductoVendido) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductoVendido_precioVenta(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PrecioVenta, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductoVendido_precioVenta(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductoVendido",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductoVendido_precioCompra(ctx context.Context, field graphql.CollectedField, obj *model.ProductoVendido) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductoVendido_precioCompra(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PrecioCompra, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductoVendido_precioCompra(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductoVendido",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductoVendido_iva(ctx context.Context, field graphql.CollectedField, obj *model.ProductoVendido) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductoVendido_iva(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Iva, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductoVendido_iva(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductoVendido",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductoVendido_margen(ctx context.Context, field graphql.CollectedField, obj *model.ProductoVendido) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductoVendido_margen(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Margen, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductoVendido_margen(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductoVendido",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductoVendido_ean(ctx context.Context, field graphql.CollectedField, obj *model.ProductoVendido) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductoVendido_ean(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ean, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductoVendido_ean(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductoVendido",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductoVendido_cantidadVendida(ctx context.Context, field graphql.CollectedField, obj *model.ProductoVendido) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductoVendido_cantidadVendida(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CantidadVendida, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductoVendido_cantidadVendida(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductoVendido",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductoVendido_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.ProductoVendido) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductoVendido_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductoVendido_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductoVendido",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductoVendido_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.ProductoVendido) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductoVendido_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductoVendido_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductoVendido",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_login(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_login(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Login(rctx, fc.Args["loginValues"].(model.Credentials))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.LoginResult)
	fc.Result = res
	return ec.marshalOLoginResult2ᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐLoginResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_login(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "message":
				return ec.fieldContext_LoginResult_message(ctx, field)
			case "success":
				return ec.fieldContext_LoginResult_success(ctx, field)
			case "token":
				return ec.fieldContext_LoginResult_token(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type LoginResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_login_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_validateJwt(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_validateJwt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ValidateJwt(rctx, fc.Args["jwt"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.JwtValidationResult)
	fc.Result = res
	return ec.marshalOJwtValidationResult2ᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐJwtValidationResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_validateJwt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "validado":
				return ec.fieldContext_JwtValidationResult_validado(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type JwtValidationResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_validateJwt_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_cliente(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_cliente(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Cliente(rctx, fc.Args["find"].(model.ClienteFind))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Cliente)
	fc.Result = res
	return ec.marshalOCliente2ᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐCliente(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_cliente(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_id":
				return ec.fieldContext_Cliente__id(ctx, field)
			case "nif":
				return ec.fieldContext_Cliente_nif(ctx, field)
			case "nombre":
				return ec.fieldContext_Cliente_nombre(ctx, field)
			case "calle":
				return ec.fieldContext_Cliente_calle(ctx, field)
			case "cp":
				return ec.fieldContext_Cliente_cp(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Cliente", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_cliente_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_clientes(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_clientes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Clientes(rctx, fc.Args["find"].(*model.ClientesFind), fc.Args["limit"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Cliente)
	fc.Result = res
	return ec.marshalOCliente2ᚕᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐCliente(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_clientes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_id":
				return ec.fieldContext_Cliente__id(ctx, field)
			case "nif":
				return ec.fieldContext_Cliente_nif(ctx, field)
			case "nombre":
				return ec.fieldContext_Cliente_nombre(ctx, field)
			case "calle":
				return ec.fieldContext_Cliente_calle(ctx, field)
			case "cp":
				return ec.fieldContext_Cliente_cp(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Cliente", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_clientes_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_empleado(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_empleado(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Empleado(rctx, fc.Args["find"].(model.EmpleadoFind))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Empleado)
	fc.Result = res
	return ec.marshalOEmpleado2ᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐEmpleado(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_empleado(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_id":
				return ec.fieldContext_Empleado__id(ctx, field)
			case "nombre":
				return ec.fieldContext_Empleado_nombre(ctx, field)
			case "apellidos":
				return ec.fieldContext_Empleado_apellidos(ctx, field)
			case "dni":
				return ec.fieldContext_Empleado_dni(ctx, field)
			case "rol":
				return ec.fieldContext_Empleado_rol(ctx, field)
			case "genero":
				return ec.fieldContext_Empleado_genero(ctx, field)
			case "email":
				return ec.fieldContext_Empleado_email(ctx, field)
			case "horasPorSemana":
				return ec.fieldContext_Empleado_horasPorSemana(ctx, field)
			case "fechaAlta":
				return ec.fieldContext_Empleado_fechaAlta(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Empleado", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_empleado_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_empleados(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_empleados(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Empleados(rctx, fc.Args["find"].(*model.EmpleadosFind), fc.Args["limit"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Empleado)
	fc.Result = res
	return ec.marshalOEmpleado2ᚕᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐEmpleado(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_empleados(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_id":
				return ec.fieldContext_Empleado__id(ctx, field)
			case "nombre":
				return ec.fieldContext_Empleado_nombre(ctx, field)
			case "apellidos":
				return ec.fieldContext_Empleado_apellidos(ctx, field)
			case "dni":
				return ec.fieldContext_Empleado_dni(ctx, field)
			case "rol":
				return ec.fieldContext_Empleado_rol(ctx, field)
			case "genero":
				return ec.fieldContext_Empleado_genero(ctx, field)
			case "email":
				return ec.fieldContext_Empleado_email(ctx, field)
			case "horasPorSemana":
				return ec.fieldContext_Empleado_horasPorSemana(ctx, field)
			case "fechaAlta":
				return ec.fieldContext_Empleado_fechaAlta(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Empleado", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_empleados_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_producto(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_producto(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Producto(rctx, fc.Args["find"].(model.ProductoFind))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Producto)
	fc.Result = res
	return ec.marshalOProducto2ᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐProducto(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_producto(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_id":
				return ec.fieldContext_Producto__id(ctx, field)
			case "nombre":
				return ec.fieldContext_Producto_nombre(ctx, field)
			case "proveedor":
				return ec.fieldContext_Producto_proveedor(ctx, field)
			case "familia":
				return ec.fieldContext_Producto_familia(ctx, field)
			case "precioVenta":
				return ec.fieldContext_Producto_precioVenta(ctx, field)
			case "precioCompra":
				return ec.fieldContext_Producto_precioCompra(ctx, field)
			case "iva":
				return ec.fieldContext_Producto_iva(ctx, field)
			case "margen":
				return ec.fieldContext_Producto_margen(ctx, field)
			case "promociones":
				return ec.fieldContext_Producto_promociones(ctx, field)
			case "ean":
				return ec.fieldContext_Producto_ean(ctx, field)
			case "cantidad":
				return ec.fieldContext_Producto_cantidad(ctx, field)
			case "cantidadRestock":
				return ec.fieldContext_Producto_cantidadRestock(ctx, field)
			case "alta":
				return ec.fieldContext_Producto_alta(ctx, field)
			case "img":
				return ec.fieldContext_Producto_img(ctx, field)
			case "createdAt":
				return ec.fieldContext_Producto_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Producto_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Producto", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_producto_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_productos(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_productos(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Productos(rctx, fc.Args["find"].(*model.ProductosFind), fc.Args["limit"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Producto)
	fc.Result = res
	return ec.marshalOProducto2ᚕᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐProducto(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_productos(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_id":
				return ec.fieldContext_Producto__id(ctx, field)
			case "nombre":
				return ec.fieldContext_Producto_nombre(ctx, field)
			case "proveedor":
				return ec.fieldContext_Producto_proveedor(ctx, field)
			case "familia":
				return ec.fieldContext_Producto_familia(ctx, field)
			case "precioVenta":
				return ec.fieldContext_Producto_precioVenta(ctx, field)
			case "precioCompra":
				return ec.fieldContext_Producto_precioCompra(ctx, field)
			case "iva":
				return ec.fieldContext_Producto_iva(ctx, field)
			case "margen":
				return ec.fieldContext_Producto_margen(ctx, field)
			case "promociones":
				return ec.fieldContext_Producto_promociones(ctx, field)
			case "ean":
				return ec.fieldContext_Producto_ean(ctx, field)
			case "cantidad":
				return ec.fieldContext_Producto_cantidad(ctx, field)
			case "cantidadRestock":
				return ec.fieldContext_Producto_cantidadRestock(ctx, field)
			case "alta":
				return ec.fieldContext_Producto_alta(ctx, field)
			case "img":
				return ec.fieldContext_Producto_img(ctx, field)
			case "createdAt":
				return ec.fieldContext_Producto_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Producto_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Producto", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_productos_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_cierreTPV(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_cierreTPV(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CierreTpv(rctx, fc.Args["find"].(model.CierreTPVFind))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CierreTpv)
	fc.Result = res
	return ec.marshalOCierreTPV2ᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐCierreTpv(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_cierreTPV(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_id":
				return ec.fieldContext_CierreTPV__id(ctx, field)
			case "tpv":
				return ec.fieldContext_CierreTPV_tpv(ctx, field)
			case "cajaInicial":
				return ec.fieldContext_CierreTPV_cajaInicial(ctx, field)
			case "abiertoPor":
				return ec.fieldContext_CierreTPV_abiertoPor(ctx, field)
			case "cerradoPor":
				return ec.fieldContext_CierreTPV_cerradoPor(ctx, field)
			case "apertura":
				return ec.fieldContext_CierreTPV_apertura(ctx, field)
			case "cierre":
				return ec.fieldContext_CierreTPV_cierre(ctx, field)
			case "numVentas":
				return ec.fieldContext_CierreTPV_numVentas(ctx, field)
			case "ventasEfectivo":
				return ec.fieldContext_CierreTPV_ventasEfectivo(ctx, field)
			case "ventasTarjeta":
				return ec.fieldContext_CierreTPV_ventasTarjeta(ctx, field)
			case "ventasTotales":
				return ec.fieldContext_CierreTPV_ventasTotales(ctx, field)
			case "dineroEsperadoEnCaja":
				return ec.fieldContext_CierreTPV_dineroEsperadoEnCaja(ctx, field)
			case "dineroRealEnCaja":
				return ec.fieldContext_CierreTPV_dineroRealEnCaja(ctx, field)
			case "dineroRetirado":
				return ec.fieldContext_CierreTPV_dineroRetirado(ctx, field)
			case "fondoDeCaja":
				return ec.fieldContext_CierreTPV_fondoDeCaja(ctx, field)
			case "beneficio":
				return ec.fieldContext_CierreTPV_beneficio(ctx, field)
			case "nota":
				return ec.fieldContext_CierreTPV_nota(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CierreTPV", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_cierreTPV_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_cierresTPVs(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_cierresTPVs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CierresTPVs(rctx, fc.Args["find"].(*model.CierresTPVFind), fc.Args["limit"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.CierreTpv)
	fc.Result = res
	return ec.marshalOCierreTPV2ᚕᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐCierreTpv(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_cierresTPVs(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_id":
				return ec.fieldContext_CierreTPV__id(ctx, field)
			case "tpv":
				return ec.fieldContext_CierreTPV_tpv(ctx, field)
			case "cajaInicial":
				return ec.fieldContext_CierreTPV_cajaInicial(ctx, field)
			case "abiertoPor":
				return ec.fieldContext_CierreTPV_abiertoPor(ctx, field)
			case "cerradoPor":
				return ec.fieldContext_CierreTPV_cerradoPor(ctx, field)
			case "apertura":
				return ec.fieldContext_CierreTPV_apertura(ctx, field)
			case "cierre":
				return ec.fieldContext_CierreTPV_cierre(ctx, field)
			case "numVentas":
				return ec.fieldContext_CierreTPV_numVentas(ctx, field)
			case "ventasEfectivo":
				return ec.fieldContext_CierreTPV_ventasEfectivo(ctx, field)
			case "ventasTarjeta":
				return ec.fieldContext_CierreTPV_ventasTarjeta(ctx, field)
			case "ventasTotales":
				return ec.fieldContext_CierreTPV_ventasTotales(ctx, field)
			case "dineroEsperadoEnCaja":
				return ec.fieldContext_CierreTPV_dineroEsperadoEnCaja(ctx, field)
			case "dineroRealEnCaja":
				return ec.fieldContext_CierreTPV_dineroRealEnCaja(ctx, field)
			case "dineroRetirado":
				return ec.fieldContext_CierreTPV_dineroRetirado(ctx, field)
			case "fondoDeCaja":
				return ec.fieldContext_CierreTPV_fondoDeCaja(ctx, field)
			case "beneficio":
				return ec.fieldContext_CierreTPV_beneficio(ctx, field)
			case "nota":
				return ec.fieldContext_CierreTPV_nota(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CierreTPV", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_cierresTPVs_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_tpv(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_tpv(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Tpv(rctx, fc.Args["find"].(model.TPVFind))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Tpv)
	fc.Result = res
	return ec.marshalOTPV2ᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐTpv(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_tpv(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_id":
				return ec.fieldContext_TPV__id(ctx, field)
			case "nombre":
				return ec.fieldContext_TPV_nombre(ctx, field)
			case "enUsoPor":
				return ec.fieldContext_TPV_enUsoPor(ctx, field)
			case "libre":
				return ec.fieldContext_TPV_libre(ctx, field)
			case "cajaInicial":
				return ec.fieldContext_TPV_cajaInicial(ctx, field)
			case "createdAt":
				return ec.fieldContext_TPV_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_TPV_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TPV", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_tpv_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_tpvs(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_tpvs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Tpvs(rctx, fc.Args["find"].(*model.TPVsFind), fc.Args["limit"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Tpv)
	fc.Result = res
	return ec.marshalOTPV2ᚕᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐTpv(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_tpvs(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_id":
				return ec.fieldContext_TPV__id(ctx, field)
			case "nombre":
				return ec.fieldContext_TPV_nombre(ctx, field)
			case "enUsoPor":
				return ec.fieldContext_TPV_enUsoPor(ctx, field)
			case "libre":
				return ec.fieldContext_TPV_libre(ctx, field)
			case "cajaInicial":
				return ec.fieldContext_TPV_cajaInicial(ctx, field)
			case "createdAt":
				return ec.fieldContext_TPV_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_TPV_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TPV", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_tpvs_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_venta(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_venta(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Venta(rctx, fc.Args["_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Venta)
	fc.Result = res
	return ec.marshalOVenta2ᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐVenta(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_venta(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_id":
				return ec.fieldContext_Venta__id(ctx, field)
			case "productos":
				return ec.fieldContext_Venta_productos(ctx, field)
			case "dineroEntregadoEfectivo":
				return ec.fieldContext_Venta_dineroEntregadoEfectivo(ctx, field)
			case "dineroEntregadoTarjeta":
				return ec.fieldContext_Venta_dineroEntregadoTarjeta(ctx, field)
			case "precioVentaTotalSinDto":
				return ec.fieldContext_Venta_precioVentaTotalSinDto(ctx, field)
			case "precioVentaTotal":
				return ec.fieldContext_Venta_precioVentaTotal(ctx, field)
			case "cambio":
				return ec.fieldContext_Venta_cambio(ctx, field)
			case "cliente":
				return ec.fieldContext_Venta_cliente(ctx, field)
			case "vendidoPor":
				return ec.fieldContext_Venta_vendidoPor(ctx, field)
			case "modificadoPor":
				return ec.fieldContext_Venta_modificadoPor(ctx, field)
			case "tipo":
				return ec.fieldContext_Venta_tipo(ctx, field)
			case "descuentoEfectivo":
				return ec.fieldContext_Venta_descuentoEfectivo(ctx, field)
			case "descuentoPorcentaje":
				return ec.fieldContext_Venta_descuentoPorcentaje(ctx, field)
			case "tpv":
				return ec.fieldContext_Venta_tpv(ctx, field)
			case "createdAt":
				return ec.fieldContext_Venta_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Venta_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Venta", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_venta_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_ventas(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_ventas(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Ventas(rctx, fc.Args["find"].(*model.VentasFind), fc.Args["limit"].(*int), fc.Args["order"].(*string), fc.Args["offset"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Venta)
	fc.Result = res
	return ec.marshalOVenta2ᚕᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐVenta(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_ventas(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_id":
				return ec.fieldContext_Venta__id(ctx, field)
			case "productos":
				return ec.fieldContext_Venta_productos(ctx, field)
			case "dineroEntregadoEfectivo":
				return ec.fieldContext_Venta_dineroEntregadoEfectivo(ctx, field)
			case "dineroEntregadoTarjeta":
				return ec.fieldContext_Venta_dineroEntregadoTarjeta(ctx, field)
			case "precioVentaTotalSinDto":
				return ec.fieldContext_Venta_precioVentaTotalSinDto(ctx, field)
			case "precioVentaTotal":
				return ec.fieldContext_Venta_precioVentaTotal(ctx, field)
			case "cambio":
				return ec.fieldContext_Venta_cambio(ctx, field)
			case "cliente":
				return ec.fieldContext_Venta_cliente(ctx, field)
			case "vendidoPor":
				return ec.fieldContext_Venta_vendidoPor(ctx, field)
			case "modificadoPor":
				return ec.fieldContext_Venta_modificadoPor(ctx, field)
			case "tipo":
				return ec.fieldContext_Venta_tipo(ctx, field)
			case "descuentoEfectivo":
				return ec.fieldContext_Venta_descuentoEfectivo(ctx, field)
			case "descuentoPorcentaje":
				return ec.fieldContext_Venta_descuentoPorcentaje(ctx, field)
			case "tpv":
				return ec.fieldContext_Venta_tpv(ctx, field)
			case "createdAt":
				return ec.fieldContext_Venta_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Venta_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Venta", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_ventas_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(fc.Args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query___type_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___schema(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___schema(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "description":
				return ec.fieldContext___Schema_description(ctx, field)
			case "types":
				return ec.fieldContext___Schema_types(ctx, field)
			case "queryType":
				return ec.fieldContext___Schema_queryType(ctx, field)
			case "mutationType":
				return ec.fieldContext___Schema_mutationType(ctx, field)
			case "subscriptionType":
				return ec.fieldContext___Schema_subscriptionType(ctx, field)
			case "directives":
				return ec.fieldContext___Schema_directives(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Schema", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ResponseMutation_message(ctx context.Context, field graphql.CollectedField, obj *model.ResponseMutation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ResponseMutation_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ResponseMutation_message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ResponseMutation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ResponseMutation_successful(ctx context.Context, field graphql.CollectedField, obj *model.ResponseMutation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ResponseMutation_successful(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Successful, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ResponseMutation_successful(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ResponseMutation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TPV__id(ctx context.Context, field graphql.CollectedField, obj *model.Tpv) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TPV__id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TPV__id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TPV",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TPV_nombre(ctx context.Context, field graphql.CollectedField, obj *model.Tpv) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TPV_nombre(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nombre, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TPV_nombre(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TPV",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TPV_enUsoPor(ctx context.Context, field graphql.CollectedField, obj *model.Tpv) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TPV_enUsoPor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnUsoPor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Empleado)
	fc.Result = res
	return ec.marshalOEmpleado2ᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐEmpleado(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TPV_enUsoPor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TPV",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_id":
				return ec.fieldContext_Empleado__id(ctx, field)
			case "nombre":
				return ec.fieldContext_Empleado_nombre(ctx, field)
			case "apellidos":
				return ec.fieldContext_Empleado_apellidos(ctx, field)
			case "dni":
				return ec.fieldContext_Empleado_dni(ctx, field)
			case "rol":
				return ec.fieldContext_Empleado_rol(ctx, field)
			case "genero":
				return ec.fieldContext_Empleado_genero(ctx, field)
			case "email":
				return ec.fieldContext_Empleado_email(ctx, field)
			case "horasPorSemana":
				return ec.fieldContext_Empleado_horasPorSemana(ctx, field)
			case "fechaAlta":
				return ec.fieldContext_Empleado_fechaAlta(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Empleado", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TPV_libre(ctx context.Context, field graphql.CollectedField, obj *model.Tpv) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TPV_libre(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Libre, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TPV_libre(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TPV",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TPV_cajaInicial(ctx context.Context, field graphql.CollectedField, obj *model.Tpv) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TPV_cajaInicial(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CajaInicial, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TPV_cajaInicial(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TPV",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TPV_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Tpv) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TPV_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TPV_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TPV",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TPV_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.Tpv) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TPV_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TPV_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TPV",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TPVMutationJwtResponse_token(ctx context.Context, field graphql.CollectedField, obj *model.TPVMutationJwtResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TPVMutationJwtResponse_token(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Token, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TPVMutationJwtResponse_token(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TPVMutationJwtResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TPVMutationJwtResponse_successful(ctx context.Context, field graphql.CollectedField, obj *model.TPVMutationJwtResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TPVMutationJwtResponse_successful(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Successful, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TPVMutationJwtResponse_successful(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TPVMutationJwtResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TPVMutationResponse_message(ctx context.Context, field graphql.CollectedField, obj *model.TPVMutationResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TPVMutationResponse_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TPVMutationResponse_message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TPVMutationResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TPVMutationResponse_successful(ctx context.Context, field graphql.CollectedField, obj *model.TPVMutationResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TPVMutationResponse_successful(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Successful, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TPVMutationResponse_successful(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TPVMutationResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Venta__id(ctx context.Context, field graphql.CollectedField, obj *model.Venta) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Venta__id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Venta__id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Venta",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Venta_productos(ctx context.Context, field graphql.CollectedField, obj *model.Venta) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Venta_productos(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Productos, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ProductoVendido)
	fc.Result = res
	return ec.marshalOProductoVendido2ᚕᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐProductoVendido(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Venta_productos(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Venta",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_id":
				return ec.fieldContext_ProductoVendido__id(ctx, field)
			case "nombre":
				return ec.fieldContext_ProductoVendido_nombre(ctx, field)
			case "proveedor":
				return ec.fieldContext_ProductoVendido_proveedor(ctx, field)
			case "familia":
				return ec.fieldContext_ProductoVendido_familia(ctx, field)
			case "precioVenta":
				return ec.fieldContext_ProductoVendido_precioVenta(ctx, field)
			case "precioCompra":
				return ec.fieldContext_ProductoVendido_precioCompra(ctx, field)
			case "iva":
				return ec.fieldContext_ProductoVendido_iva(ctx, field)
			case "margen":
				return ec.fieldContext_ProductoVendido_margen(ctx, field)
			case "ean":
				return ec.fieldContext_ProductoVendido_ean(ctx, field)
			case "cantidadVendida":
				return ec.fieldContext_ProductoVendido_cantidadVendida(ctx, field)
			case "createdAt":
				return ec.fieldContext_ProductoVendido_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_ProductoVendido_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProductoVendido", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Venta_dineroEntregadoEfectivo(ctx context.Context, field graphql.CollectedField, obj *model.Venta) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Venta_dineroEntregadoEfectivo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DineroEntregadoEfectivo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Venta_dineroEntregadoEfectivo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Venta",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Venta_dineroEntregadoTarjeta(ctx context.Context, field graphql.CollectedField, obj *model.Venta) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Venta_dineroEntregadoTarjeta(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DineroEntregadoTarjeta, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Venta_dineroEntregadoTarjeta(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Venta",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Venta_precioVentaTotalSinDto(ctx context.Context, field graphql.CollectedField, obj *model.Venta) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Venta_precioVentaTotalSinDto(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PrecioVentaTotalSinDto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Venta_precioVentaTotalSinDto(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Venta",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Venta_precioVentaTotal(ctx context.Context, field graphql.CollectedField, obj *model.Venta) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Venta_precioVentaTotal(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PrecioVentaTotal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Venta_precioVentaTotal(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Venta",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Venta_cambio(ctx context.Context, field graphql.CollectedField, obj *model.Venta) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Venta_cambio(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cambio, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Venta_cambio(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Venta",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Venta_cliente(ctx context.Context, field graphql.CollectedField, obj *model.Venta) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Venta_cliente(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cliente, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Cliente)
	fc.Result = res
	return ec.marshalOCliente2ᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐCliente(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Venta_cliente(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Venta",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_id":
				return ec.fieldContext_Cliente__id(ctx, field)
			case "nif":
				return ec.fieldContext_Cliente_nif(ctx, field)
			case "nombre":
				return ec.fieldContext_Cliente_nombre(ctx, field)
			case "calle":
				return ec.fieldContext_Cliente_calle(ctx, field)
			case "cp":
				return ec.fieldContext_Cliente_cp(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Cliente", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Venta_vendidoPor(ctx context.Context, field graphql.CollectedField, obj *model.Venta) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Venta_vendidoPor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VendidoPor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Empleado)
	fc.Result = res
	return ec.marshalOEmpleado2ᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐEmpleado(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Venta_vendidoPor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Venta",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_id":
				return ec.fieldContext_Empleado__id(ctx, field)
			case "nombre":
				return ec.fieldContext_Empleado_nombre(ctx, field)
			case "apellidos":
				return ec.fieldContext_Empleado_apellidos(ctx, field)
			case "dni":
				return ec.fieldContext_Empleado_dni(ctx, field)
			case "rol":
				return ec.fieldContext_Empleado_rol(ctx, field)
			case "genero":
				return ec.fieldContext_Empleado_genero(ctx, field)
			case "email":
				return ec.fieldContext_Empleado_email(ctx, field)
			case "horasPorSemana":
				return ec.fieldContext_Empleado_horasPorSemana(ctx, field)
			case "fechaAlta":
				return ec.fieldContext_Empleado_fechaAlta(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Empleado", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Venta_modificadoPor(ctx context.Context, field graphql.CollectedField, obj *model.Venta) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Venta_modificadoPor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModificadoPor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Empleado)
	fc.Result = res
	return ec.marshalOEmpleado2ᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐEmpleado(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Venta_modificadoPor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Venta",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_id":
				return ec.fieldContext_Empleado__id(ctx, field)
			case "nombre":
				return ec.fieldContext_Empleado_nombre(ctx, field)
			case "apellidos":
				return ec.fieldContext_Empleado_apellidos(ctx, field)
			case "dni":
				return ec.fieldContext_Empleado_dni(ctx, field)
			case "rol":
				return ec.fieldContext_Empleado_rol(ctx, field)
			case "genero":
				return ec.fieldContext_Empleado_genero(ctx, field)
			case "email":
				return ec.fieldContext_Empleado_email(ctx, field)
			case "horasPorSemana":
				return ec.fieldContext_Empleado_horasPorSemana(ctx, field)
			case "fechaAlta":
				return ec.fieldContext_Empleado_fechaAlta(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Empleado", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Venta_tipo(ctx context.Context, field graphql.CollectedField, obj *model.Venta) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Venta_tipo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tipo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Venta_tipo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Venta",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Venta_descuentoEfectivo(ctx context.Context, field graphql.CollectedField, obj *model.Venta) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Venta_descuentoEfectivo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DescuentoEfectivo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Venta_descuentoEfectivo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Venta",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Venta_descuentoPorcentaje(ctx context.Context, field graphql.CollectedField, obj *model.Venta) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Venta_descuentoPorcentaje(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DescuentoPorcentaje, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Venta_descuentoPorcentaje(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Venta",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Venta_tpv(ctx context.Context, field graphql.CollectedField, obj *model.Venta) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Venta_tpv(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tpv, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Venta_tpv(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Venta",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Venta_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Venta) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Venta_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Venta_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Venta",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Venta_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.Venta) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Venta_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Venta_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Venta",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VentaMutationResponse__id(ctx context.Context, field graphql.CollectedField, obj *model.VentaMutationResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VentaMutationResponse__id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VentaMutationResponse__id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VentaMutationResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VentaMutationResponse_message(ctx context.Context, field graphql.CollectedField, obj *model.VentaMutationResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VentaMutationResponse_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VentaMutationResponse_message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VentaMutationResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VentaMutationResponse_successful(ctx context.Context, field graphql.CollectedField, obj *model.VentaMutationResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VentaMutationResponse_successful(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Successful, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VentaMutationResponse_successful(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VentaMutationResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VentaMutationResponse_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.VentaMutationResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VentaMutationResponse_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VentaMutationResponse_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VentaMutationResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_locations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_locations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __DirectiveLocation does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_isRepeatable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRepeatable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_isDeprecated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_deprecationReason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_defaultValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_types(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_types(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_queryType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_queryType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_mutationType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_mutationType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_subscriptionType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_directives(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_directives(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Directive_name(ctx, field)
			case "description":
				return ec.fieldContext___Directive_description(ctx, field)
			case "locations":
				return ec.fieldContext___Directive_locations(ctx, field)
			case "args":
				return ec.fieldContext___Directive_args(ctx, field)
			case "isRepeatable":
				return ec.fieldContext___Directive_isRepeatable(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Directive", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_kind(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_kind(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __TypeKind does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_fields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_fields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Field_name(ctx, field)
			case "description":
				return ec.fieldContext___Field_description(ctx, field)
			case "args":
				return ec.fieldContext___Field_args(ctx, field)
			case "type":
				return ec.fieldContext___Field_type(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___Field_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___Field_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Field", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_fields_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_interfaces(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_interfaces(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_possibleTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_possibleTypes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_enumValues(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_enumValues(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___EnumValue_name(ctx, field)
			case "description":
				return ec.fieldContext___EnumValue_description(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___EnumValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___EnumValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __EnumValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_enumValues_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_inputFields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_inputFields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_ofType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_ofType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_specifiedByURL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpecifiedByURL(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputCierreTPVFind(ctx context.Context, obj interface{}) (model.CierreTPVFind, error) {
	var it model.CierreTPVFind
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_id"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "fecha":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fecha"))
			it.Fecha, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCierreTPVInput(ctx context.Context, obj interface{}) (model.CierreTPVInput, error) {
	var it model.CierreTPVInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_id"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tpv":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tpv"))
			it.Tpv, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "cajaInicial":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cajaInicial"))
			it.CajaInicial, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "abiertoPor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("abiertoPor"))
			it.AbiertoPor, err = ec.unmarshalNEmpleadoInput2ᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐEmpleadoInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "cerradoPor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cerradoPor"))
			it.CerradoPor, err = ec.unmarshalNEmpleadoInput2ᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐEmpleadoInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "apertura":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("apertura"))
			it.Apertura, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "cierre":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cierre"))
			it.Cierre, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "numVentas":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numVentas"))
			it.NumVentas, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "ventasEfectivo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ventasEfectivo"))
			it.VentasEfectivo, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "ventasTarjeta":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ventasTarjeta"))
			it.VentasTarjeta, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "ventasTotales":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ventasTotales"))
			it.VentasTotales, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "dineroEsperadoEnCaja":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dineroEsperadoEnCaja"))
			it.DineroEsperadoEnCaja, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "dineroRealEnCaja":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dineroRealEnCaja"))
			it.DineroRealEnCaja, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "dineroRetirado":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dineroRetirado"))
			it.DineroRetirado, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "fondoDeCaja":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fondoDeCaja"))
			it.FondoDeCaja, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "nota":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nota"))
			it.Nota, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCierresTPVFind(ctx context.Context, obj interface{}) (model.CierresTPVFind, error) {
	var it model.CierresTPVFind
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "fecha":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fecha"))
			it.Fecha, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputClienteFind(ctx context.Context, obj interface{}) (model.ClienteFind, error) {
	var it model.ClienteFind
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_id"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nif":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nif"))
			it.Nif, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputClienteInput(ctx context.Context, obj interface{}) (model.ClienteInput, error) {
	var it model.ClienteInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_id"))
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "nif":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nif"))
			it.Nif, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "nombre":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nombre"))
			it.Nombre, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "calle":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("calle"))
			it.Calle, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "cp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cp"))
			it.Cp, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputClientesFind(ctx context.Context, obj interface{}) (model.ClientesFind, error) {
	var it model.ClientesFind
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "_ids":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_ids"))
			it.Ids, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "nombre":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nombre"))
			it.Nombre, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "query":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
			it.Query, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCredentials(ctx context.Context, obj interface{}) (model.Credentials, error) {
	var it model.Credentials
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			it.Email, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "password":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			it.Password, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEmpleadoFind(ctx context.Context, obj interface{}) (model.EmpleadoFind, error) {
	var it model.EmpleadoFind
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_id"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nombre":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nombre"))
			it.Nombre, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dni":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dni"))
			it.Dni, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEmpleadoInput(ctx context.Context, obj interface{}) (model.EmpleadoInput, error) {
	var it model.EmpleadoInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_id"))
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "nombre":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nombre"))
			it.Nombre, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "apellidos":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("apellidos"))
			it.Apellidos, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "dni":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dni"))
			it.Dni, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "rol":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rol"))
			it.Rol, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "genero":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("genero"))
			it.Genero, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			it.Email, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "horasPorSemana":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("horasPorSemana"))
			it.HorasPorSemana, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "fechaAlta":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fechaAlta"))
			it.FechaAlta, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEmpleadosFind(ctx context.Context, obj interface{}) (model.EmpleadosFind, error) {
	var it model.EmpleadosFind
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "_ids":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_ids"))
			it.Ids, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "nombre":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nombre"))
			it.Nombre, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "rol":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rol"))
			it.Rol, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "query":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
			it.Query, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputProductoAddInput(ctx context.Context, obj interface{}) (model.ProductoAddInput, error) {
	var it model.ProductoAddInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "nombre":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nombre"))
			it.Nombre, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "proveedor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("proveedor"))
			it.Proveedor, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "familia":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("familia"))
			it.Familia, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "precioVenta":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("precioVenta"))
			it.PrecioVenta, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "precioCompra":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("precioCompra"))
			it.PrecioCompra, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "iva":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("iva"))
			it.Iva, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "margen":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("margen"))
			it.Margen, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "promociones":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("promociones"))
			it.Promociones, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ean":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ean"))
			it.Ean, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "cantidad":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cantidad"))
			it.Cantidad, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "cantidadRestock":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cantidadRestock"))
			it.CantidadRestock, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "alta":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alta"))
			it.Alta, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "img":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("img"))
			it.Img, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputProductoFind(ctx context.Context, obj interface{}) (model.ProductoFind, error) {
	var it model.ProductoFind
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_id"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nombre":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nombre"))
			it.Nombre, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ean":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ean"))
			it.Ean, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputProductoUpdateInput(ctx context.Context, obj interface{}) (model.ProductoUpdateInput, error) {
	var it model.ProductoUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_id"))
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "nombre":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nombre"))
			it.Nombre, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "proveedor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("proveedor"))
			it.Proveedor, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "familia":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("familia"))
			it.Familia, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "precioVenta":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("precioVenta"))
			it.PrecioVenta, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "precioCompra":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("precioCompra"))
			it.PrecioCompra, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "iva":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("iva"))
			it.Iva, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "margen":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("margen"))
			it.Margen, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "promociones":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("promociones"))
			it.Promociones, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ean":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ean"))
			it.Ean, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cantidad":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cantidad"))
			it.Cantidad, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "cantidadRestock":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cantidadRestock"))
			it.CantidadRestock, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "alta":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alta"))
			it.Alta, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "img":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("img"))
			it.Img, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputProductoVendidoInput(ctx context.Context, obj interface{}) (model.ProductoVendidoInput, error) {
	var it model.ProductoVendidoInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_id"))
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "nombre":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nombre"))
			it.Nombre, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "proveedor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("proveedor"))
			it.Proveedor, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "familia":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("familia"))
			it.Familia, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "precioVenta":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("precioVenta"))
			it.PrecioVenta, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "precioCompra":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("precioCompra"))
			it.PrecioCompra, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "iva":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("iva"))
			it.Iva, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "margen":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("margen"))
			it.Margen, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "ean":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ean"))
			it.Ean, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cantidadVendida":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cantidadVendida"))
			it.CantidadVendida, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dto":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dto"))
			it.Dto, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputProductosFind(ctx context.Context, obj interface{}) (model.ProductosFind, error) {
	var it model.ProductosFind
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "_ids":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_ids"))
			it.Ids, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "nombre":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nombre"))
			it.Nombre, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "familia":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("familia"))
			it.Familia, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "proveedor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("proveedor"))
			it.Proveedor, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "query":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
			it.Query, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTPVFind(ctx context.Context, obj interface{}) (model.TPVFind, error) {
	var it model.TPVFind
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_id"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nombre":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nombre"))
			it.Nombre, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "empleadoId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("empleadoId"))
			it.EmpleadoID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTPVsFind(ctx context.Context, obj interface{}) (model.TPVsFind, error) {
	var it model.TPVsFind
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "libre":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("libre"))
			it.Libre, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVentaFields(ctx context.Context, obj interface{}) (model.VentaFields, error) {
	var it model.VentaFields
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "productos":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("productos"))
			it.Productos, err = ec.unmarshalNProductoVendidoInput2ᚕᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐProductoVendidoInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "dineroEntregadoEfectivo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dineroEntregadoEfectivo"))
			it.DineroEntregadoEfectivo, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "dineroEntregadoTarjeta":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dineroEntregadoTarjeta"))
			it.DineroEntregadoTarjeta, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "precioVentaTotalSinDto":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("precioVentaTotalSinDto"))
			it.PrecioVentaTotalSinDto, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "precioVentaTotal":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("precioVentaTotal"))
			it.PrecioVentaTotal, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "cambio":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cambio"))
			it.Cambio, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "cliente":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cliente"))
			it.Cliente, err = ec.unmarshalNClienteInput2ᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐClienteInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "vendidoPor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vendidoPor"))
			it.VendidoPor, err = ec.unmarshalNEmpleadoInput2ᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐEmpleadoInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "modificadoPor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("modificadoPor"))
			it.ModificadoPor, err = ec.unmarshalNEmpleadoInput2ᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐEmpleadoInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "tipo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tipo"))
			it.Tipo, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "descuentoEfectivo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descuentoEfectivo"))
			it.DescuentoEfectivo, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "descuentoPorcentaje":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descuentoPorcentaje"))
			it.DescuentoPorcentaje, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "tpv":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tpv"))
			it.Tpv, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVentasFind(ctx context.Context, obj interface{}) (model.VentasFind, error) {
	var it model.VentasFind
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "_ids":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_ids"))
			it.Ids, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "clienteId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clienteId"))
			it.ClienteID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tipo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tipo"))
			it.Tipo, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vendedorId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vendedorId"))
			it.VendedorID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "fechaInicial":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fechaInicial"))
			it.FechaInicial, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "fechaFinal":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fechaFinal"))
			it.FechaFinal, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tpv":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tpv"))
			it.Tpv, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "query":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
			it.Query, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var cierreTPVImplementors = []string{"CierreTPV"}

func (ec *executionContext) _CierreTPV(ctx context.Context, sel ast.SelectionSet, obj *model.CierreTpv) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cierreTPVImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CierreTPV")
		case "_id":

			out.Values[i] = ec._CierreTPV__id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "tpv":

			out.Values[i] = ec._CierreTPV_tpv(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cajaInicial":

			out.Values[i] = ec._CierreTPV_cajaInicial(ctx, field, obj)

		case "abiertoPor":

			out.Values[i] = ec._CierreTPV_abiertoPor(ctx, field, obj)

		case "cerradoPor":

			out.Values[i] = ec._CierreTPV_cerradoPor(ctx, field, obj)

		case "apertura":

			out.Values[i] = ec._CierreTPV_apertura(ctx, field, obj)

		case "cierre":

			out.Values[i] = ec._CierreTPV_cierre(ctx, field, obj)

		case "numVentas":

			out.Values[i] = ec._CierreTPV_numVentas(ctx, field, obj)

		case "ventasEfectivo":

			out.Values[i] = ec._CierreTPV_ventasEfectivo(ctx, field, obj)

		case "ventasTarjeta":

			out.Values[i] = ec._CierreTPV_ventasTarjeta(ctx, field, obj)

		case "ventasTotales":

			out.Values[i] = ec._CierreTPV_ventasTotales(ctx, field, obj)

		case "dineroEsperadoEnCaja":

			out.Values[i] = ec._CierreTPV_dineroEsperadoEnCaja(ctx, field, obj)

		case "dineroRealEnCaja":

			out.Values[i] = ec._CierreTPV_dineroRealEnCaja(ctx, field, obj)

		case "dineroRetirado":

			out.Values[i] = ec._CierreTPV_dineroRetirado(ctx, field, obj)

		case "fondoDeCaja":

			out.Values[i] = ec._CierreTPV_fondoDeCaja(ctx, field, obj)

		case "beneficio":

			out.Values[i] = ec._CierreTPV_beneficio(ctx, field, obj)

		case "nota":

			out.Values[i] = ec._CierreTPV_nota(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var cierreTPVMutationResponseImplementors = []string{"CierreTPVMutationResponse"}

func (ec *executionContext) _CierreTPVMutationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.CierreTPVMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cierreTPVMutationResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CierreTPVMutationResponse")
		case "message":

			out.Values[i] = ec._CierreTPVMutationResponse_message(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "successful":

			out.Values[i] = ec._CierreTPVMutationResponse_successful(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "token":

			out.Values[i] = ec._CierreTPVMutationResponse_token(ctx, field, obj)

		case "cierre":

			out.Values[i] = ec._CierreTPVMutationResponse_cierre(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var clienteImplementors = []string{"Cliente"}

func (ec *executionContext) _Cliente(ctx context.Context, sel ast.SelectionSet, obj *model.Cliente) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, clienteImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Cliente")
		case "_id":

			out.Values[i] = ec._Cliente__id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "nif":

			out.Values[i] = ec._Cliente_nif(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "nombre":

			out.Values[i] = ec._Cliente_nombre(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "calle":

			out.Values[i] = ec._Cliente_calle(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cp":

			out.Values[i] = ec._Cliente_cp(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var clienteMutationResponseImplementors = []string{"ClienteMutationResponse"}

func (ec *executionContext) _ClienteMutationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.ClienteMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, clienteMutationResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ClienteMutationResponse")
		case "message":

			out.Values[i] = ec._ClienteMutationResponse_message(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "successful":

			out.Values[i] = ec._ClienteMutationResponse_successful(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var empleadoImplementors = []string{"Empleado"}

func (ec *executionContext) _Empleado(ctx context.Context, sel ast.SelectionSet, obj *model.Empleado) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, empleadoImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Empleado")
		case "_id":

			out.Values[i] = ec._Empleado__id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "nombre":

			out.Values[i] = ec._Empleado_nombre(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "apellidos":

			out.Values[i] = ec._Empleado_apellidos(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "dni":

			out.Values[i] = ec._Empleado_dni(ctx, field, obj)

		case "rol":

			out.Values[i] = ec._Empleado_rol(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "genero":

			out.Values[i] = ec._Empleado_genero(ctx, field, obj)

		case "email":

			out.Values[i] = ec._Empleado_email(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "horasPorSemana":

			out.Values[i] = ec._Empleado_horasPorSemana(ctx, field, obj)

		case "fechaAlta":

			out.Values[i] = ec._Empleado_fechaAlta(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var empleadoMutationResponseImplementors = []string{"EmpleadoMutationResponse"}

func (ec *executionContext) _EmpleadoMutationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.EmpleadoMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, empleadoMutationResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EmpleadoMutationResponse")
		case "message":

			out.Values[i] = ec._EmpleadoMutationResponse_message(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "successful":

			out.Values[i] = ec._EmpleadoMutationResponse_successful(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var jwtValidationResultImplementors = []string{"JwtValidationResult"}

func (ec *executionContext) _JwtValidationResult(ctx context.Context, sel ast.SelectionSet, obj *model.JwtValidationResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, jwtValidationResultImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("JwtValidationResult")
		case "validado":

			out.Values[i] = ec._JwtValidationResult_validado(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var loginResultImplementors = []string{"LoginResult"}

func (ec *executionContext) _LoginResult(ctx context.Context, sel ast.SelectionSet, obj *model.LoginResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, loginResultImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LoginResult")
		case "message":

			out.Values[i] = ec._LoginResult_message(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "success":

			out.Values[i] = ec._LoginResult_success(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "token":

			out.Values[i] = ec._LoginResult_token(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "addCliente":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_addCliente(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteCliente":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteCliente(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateCliente":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateCliente(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "addEmpleado":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_addEmpleado(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteEmpleado":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteEmpleado(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateEmpleado":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateEmpleado(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "addProductosFile":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_addProductosFile(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "addClientesFile":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_addClientesFile(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "addVentasFile":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_addVentasFile(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "addProducto":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_addProducto(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteProducto":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteProducto(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateProducto":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateProducto(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "addCierreTPV":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_addCierreTPV(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteCierreTPV":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteCierreTPV(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateCierreTPV":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateCierreTPV(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "addTPV":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_addTPV(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteTPV":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteTPV(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateTPV":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateTPV(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ocupyTPV":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_ocupyTPV(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "freeTPV":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_freeTPV(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "addVenta":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_addVenta(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteVenta":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteVenta(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateVenta":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateVenta(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var productoImplementors = []string{"Producto"}

func (ec *executionContext) _Producto(ctx context.Context, sel ast.SelectionSet, obj *model.Producto) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, productoImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Producto")
		case "_id":

			out.Values[i] = ec._Producto__id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "nombre":

			out.Values[i] = ec._Producto_nombre(ctx, field, obj)

		case "proveedor":

			out.Values[i] = ec._Producto_proveedor(ctx, field, obj)

		case "familia":

			out.Values[i] = ec._Producto_familia(ctx, field, obj)

		case "precioVenta":

			out.Values[i] = ec._Producto_precioVenta(ctx, field, obj)

		case "precioCompra":

			out.Values[i] = ec._Producto_precioCompra(ctx, field, obj)

		case "iva":

			out.Values[i] = ec._Producto_iva(ctx, field, obj)

		case "margen":

			out.Values[i] = ec._Producto_margen(ctx, field, obj)

		case "promociones":

			out.Values[i] = ec._Producto_promociones(ctx, field, obj)

		case "ean":

			out.Values[i] = ec._Producto_ean(ctx, field, obj)

		case "cantidad":

			out.Values[i] = ec._Producto_cantidad(ctx, field, obj)

		case "cantidadRestock":

			out.Values[i] = ec._Producto_cantidadRestock(ctx, field, obj)

		case "alta":

			out.Values[i] = ec._Producto_alta(ctx, field, obj)

		case "img":

			out.Values[i] = ec._Producto_img(ctx, field, obj)

		case "createdAt":

			out.Values[i] = ec._Producto_createdAt(ctx, field, obj)

		case "updatedAt":

			out.Values[i] = ec._Producto_updatedAt(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var productoMutationResponseImplementors = []string{"ProductoMutationResponse"}

func (ec *executionContext) _ProductoMutationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.ProductoMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, productoMutationResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProductoMutationResponse")
		case "message":

			out.Values[i] = ec._ProductoMutationResponse_message(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "successful":

			out.Values[i] = ec._ProductoMutationResponse_successful(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var productoVendidoImplementors = []string{"ProductoVendido"}

func (ec *executionContext) _ProductoVendido(ctx context.Context, sel ast.SelectionSet, obj *model.ProductoVendido) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, productoVendidoImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProductoVendido")
		case "_id":

			out.Values[i] = ec._ProductoVendido__id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "nombre":

			out.Values[i] = ec._ProductoVendido_nombre(ctx, field, obj)

		case "proveedor":

			out.Values[i] = ec._ProductoVendido_proveedor(ctx, field, obj)

		case "familia":

			out.Values[i] = ec._ProductoVendido_familia(ctx, field, obj)

		case "precioVenta":

			out.Values[i] = ec._ProductoVendido_precioVenta(ctx, field, obj)

		case "precioCompra":

			out.Values[i] = ec._ProductoVendido_precioCompra(ctx, field, obj)

		case "iva":

			out.Values[i] = ec._ProductoVendido_iva(ctx, field, obj)

		case "margen":

			out.Values[i] = ec._ProductoVendido_margen(ctx, field, obj)

		case "ean":

			out.Values[i] = ec._ProductoVendido_ean(ctx, field, obj)

		case "cantidadVendida":

			out.Values[i] = ec._ProductoVendido_cantidadVendida(ctx, field, obj)

		case "createdAt":

			out.Values[i] = ec._ProductoVendido_createdAt(ctx, field, obj)

		case "updatedAt":

			out.Values[i] = ec._ProductoVendido_updatedAt(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "login":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_login(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "validateJwt":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_validateJwt(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "cliente":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_cliente(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "clientes":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_clientes(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "empleado":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_empleado(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "empleados":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_empleados(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "producto":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_producto(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "productos":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_productos(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "cierreTPV":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_cierreTPV(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "cierresTPVs":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_cierresTPVs(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "tpv":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_tpv(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "tpvs":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_tpvs(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "venta":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_venta(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "ventas":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ventas(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "__type":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___type(ctx, field)
			})

		case "__schema":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___schema(ctx, field)
			})

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var responseMutationImplementors = []string{"ResponseMutation"}

func (ec *executionContext) _ResponseMutation(ctx context.Context, sel ast.SelectionSet, obj *model.ResponseMutation) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, responseMutationImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ResponseMutation")
		case "message":

			out.Values[i] = ec._ResponseMutation_message(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "successful":

			out.Values[i] = ec._ResponseMutation_successful(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var tPVImplementors = []string{"TPV"}

func (ec *executionContext) _TPV(ctx context.Context, sel ast.SelectionSet, obj *model.Tpv) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, tPVImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TPV")
		case "_id":

			out.Values[i] = ec._TPV__id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "nombre":

			out.Values[i] = ec._TPV_nombre(ctx, field, obj)

		case "enUsoPor":

			out.Values[i] = ec._TPV_enUsoPor(ctx, field, obj)

		case "libre":

			out.Values[i] = ec._TPV_libre(ctx, field, obj)

		case "cajaInicial":

			out.Values[i] = ec._TPV_cajaInicial(ctx, field, obj)

		case "createdAt":

			out.Values[i] = ec._TPV_createdAt(ctx, field, obj)

		case "updatedAt":

			out.Values[i] = ec._TPV_updatedAt(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var tPVMutationJwtResponseImplementors = []string{"TPVMutationJwtResponse"}

func (ec *executionContext) _TPVMutationJwtResponse(ctx context.Context, sel ast.SelectionSet, obj *model.TPVMutationJwtResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, tPVMutationJwtResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TPVMutationJwtResponse")
		case "token":

			out.Values[i] = ec._TPVMutationJwtResponse_token(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "successful":

			out.Values[i] = ec._TPVMutationJwtResponse_successful(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var tPVMutationResponseImplementors = []string{"TPVMutationResponse"}

func (ec *executionContext) _TPVMutationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.TPVMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, tPVMutationResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TPVMutationResponse")
		case "message":

			out.Values[i] = ec._TPVMutationResponse_message(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "successful":

			out.Values[i] = ec._TPVMutationResponse_successful(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ventaImplementors = []string{"Venta"}

func (ec *executionContext) _Venta(ctx context.Context, sel ast.SelectionSet, obj *model.Venta) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ventaImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Venta")
		case "_id":

			out.Values[i] = ec._Venta__id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "productos":

			out.Values[i] = ec._Venta_productos(ctx, field, obj)

		case "dineroEntregadoEfectivo":

			out.Values[i] = ec._Venta_dineroEntregadoEfectivo(ctx, field, obj)

		case "dineroEntregadoTarjeta":

			out.Values[i] = ec._Venta_dineroEntregadoTarjeta(ctx, field, obj)

		case "precioVentaTotalSinDto":

			out.Values[i] = ec._Venta_precioVentaTotalSinDto(ctx, field, obj)

		case "precioVentaTotal":

			out.Values[i] = ec._Venta_precioVentaTotal(ctx, field, obj)

		case "cambio":

			out.Values[i] = ec._Venta_cambio(ctx, field, obj)

		case "cliente":

			out.Values[i] = ec._Venta_cliente(ctx, field, obj)

		case "vendidoPor":

			out.Values[i] = ec._Venta_vendidoPor(ctx, field, obj)

		case "modificadoPor":

			out.Values[i] = ec._Venta_modificadoPor(ctx, field, obj)

		case "tipo":

			out.Values[i] = ec._Venta_tipo(ctx, field, obj)

		case "descuentoEfectivo":

			out.Values[i] = ec._Venta_descuentoEfectivo(ctx, field, obj)

		case "descuentoPorcentaje":

			out.Values[i] = ec._Venta_descuentoPorcentaje(ctx, field, obj)

		case "tpv":

			out.Values[i] = ec._Venta_tpv(ctx, field, obj)

		case "createdAt":

			out.Values[i] = ec._Venta_createdAt(ctx, field, obj)

		case "updatedAt":

			out.Values[i] = ec._Venta_updatedAt(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ventaMutationResponseImplementors = []string{"VentaMutationResponse"}

func (ec *executionContext) _VentaMutationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.VentaMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ventaMutationResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VentaMutationResponse")
		case "_id":

			out.Values[i] = ec._VentaMutationResponse__id(ctx, field, obj)

		case "message":

			out.Values[i] = ec._VentaMutationResponse_message(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "successful":

			out.Values[i] = ec._VentaMutationResponse_successful(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":

			out.Values[i] = ec._VentaMutationResponse_createdAt(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":

			out.Values[i] = ec.___Directive_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___Directive_description(ctx, field, obj)

		case "locations":

			out.Values[i] = ec.___Directive_locations(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":

			out.Values[i] = ec.___Directive_args(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isRepeatable":

			out.Values[i] = ec.___Directive_isRepeatable(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":

			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)

		case "isDeprecated":

			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":

			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":

			out.Values[i] = ec.___Field_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___Field_description(ctx, field, obj)

		case "args":

			out.Values[i] = ec.___Field_args(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":

			out.Values[i] = ec.___Field_type(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":

			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":

			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":

			out.Values[i] = ec.___InputValue_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___InputValue_description(ctx, field, obj)

		case "type":

			out.Values[i] = ec.___InputValue_type(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":

			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "description":

			out.Values[i] = ec.___Schema_description(ctx, field, obj)

		case "types":

			out.Values[i] = ec.___Schema_types(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":

			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":

			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)

		case "subscriptionType":

			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)

		case "directives":

			out.Values[i] = ec.___Schema_directives(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":

			out.Values[i] = ec.___Type_kind(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec.___Type_name(ctx, field, obj)

		case "description":

			out.Values[i] = ec.___Type_description(ctx, field, obj)

		case "fields":

			out.Values[i] = ec.___Type_fields(ctx, field, obj)

		case "interfaces":

			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)

		case "possibleTypes":

			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)

		case "enumValues":

			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)

		case "inputFields":

			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)

		case "ofType":

			out.Values[i] = ec.___Type_ofType(ctx, field, obj)

		case "specifiedByURL":

			out.Values[i] = ec.___Type_specifiedByURL(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNCierreTPVFind2exampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐCierreTPVFind(ctx context.Context, v interface{}) (model.CierreTPVFind, error) {
	res, err := ec.unmarshalInputCierreTPVFind(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCierreTPVInput2exampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐCierreTPVInput(ctx context.Context, v interface{}) (model.CierreTPVInput, error) {
	res, err := ec.unmarshalInputCierreTPVInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCierreTPVMutationResponse2exampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐCierreTPVMutationResponse(ctx context.Context, sel ast.SelectionSet, v model.CierreTPVMutationResponse) graphql.Marshaler {
	return ec._CierreTPVMutationResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNCierreTPVMutationResponse2ᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐCierreTPVMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.CierreTPVMutationResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CierreTPVMutationResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalNClienteFind2exampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐClienteFind(ctx context.Context, v interface{}) (model.ClienteFind, error) {
	res, err := ec.unmarshalInputClienteFind(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNClienteInput2ᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐClienteInput(ctx context.Context, v interface{}) (*model.ClienteInput, error) {
	res, err := ec.unmarshalInputClienteInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNClienteMutationResponse2exampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐClienteMutationResponse(ctx context.Context, sel ast.SelectionSet, v model.ClienteMutationResponse) graphql.Marshaler {
	return ec._ClienteMutationResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNClienteMutationResponse2ᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐClienteMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.ClienteMutationResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ClienteMutationResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCredentials2exampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐCredentials(ctx context.Context, v interface{}) (model.Credentials, error) {
	res, err := ec.unmarshalInputCredentials(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEmpleadoFind2exampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐEmpleadoFind(ctx context.Context, v interface{}) (model.EmpleadoFind, error) {
	res, err := ec.unmarshalInputEmpleadoFind(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEmpleadoInput2ᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐEmpleadoInput(ctx context.Context, v interface{}) (*model.EmpleadoInput, error) {
	res, err := ec.unmarshalInputEmpleadoInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNEmpleadoMutationResponse2exampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐEmpleadoMutationResponse(ctx context.Context, sel ast.SelectionSet, v model.EmpleadoMutationResponse) graphql.Marshaler {
	return ec._EmpleadoMutationResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNEmpleadoMutationResponse2ᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐEmpleadoMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.EmpleadoMutationResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._EmpleadoMutationResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalNFloat2float64(ctx context.Context, v interface{}) (float64, error) {
	res, err := graphql.UnmarshalFloatContext(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFloat2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	res := graphql.MarshalFloatContext(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return graphql.WrapContextMarshaler(ctx, res)
}

func (ec *executionContext) unmarshalNID2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalID(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNID2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalID(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNProductoAddInput2exampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐProductoAddInput(ctx context.Context, v interface{}) (model.ProductoAddInput, error) {
	res, err := ec.unmarshalInputProductoAddInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNProductoFind2exampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐProductoFind(ctx context.Context, v interface{}) (model.ProductoFind, error) {
	res, err := ec.unmarshalInputProductoFind(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNProductoMutationResponse2exampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐProductoMutationResponse(ctx context.Context, sel ast.SelectionSet, v model.ProductoMutationResponse) graphql.Marshaler {
	return ec._ProductoMutationResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNProductoMutationResponse2ᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐProductoMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.ProductoMutationResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ProductoMutationResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalNProductoUpdateInput2exampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐProductoUpdateInput(ctx context.Context, v interface{}) (model.ProductoUpdateInput, error) {
	res, err := ec.unmarshalInputProductoUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNProductoVendidoInput2ᚕᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐProductoVendidoInput(ctx context.Context, v interface{}) ([]*model.ProductoVendidoInput, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.ProductoVendidoInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOProductoVendidoInput2ᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐProductoVendidoInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNResponseMutation2exampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐResponseMutation(ctx context.Context, sel ast.SelectionSet, v model.ResponseMutation) graphql.Marshaler {
	return ec._ResponseMutation(ctx, sel, &v)
}

func (ec *executionContext) marshalNResponseMutation2ᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐResponseMutation(ctx context.Context, sel ast.SelectionSet, v *model.ResponseMutation) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ResponseMutation(ctx, sel, v)
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNTPVFind2exampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐTPVFind(ctx context.Context, v interface{}) (model.TPVFind, error) {
	res, err := ec.unmarshalInputTPVFind(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTPVMutationJwtResponse2exampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐTPVMutationJwtResponse(ctx context.Context, sel ast.SelectionSet, v model.TPVMutationJwtResponse) graphql.Marshaler {
	return ec._TPVMutationJwtResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNTPVMutationJwtResponse2ᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐTPVMutationJwtResponse(ctx context.Context, sel ast.SelectionSet, v *model.TPVMutationJwtResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TPVMutationJwtResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNTPVMutationResponse2exampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐTPVMutationResponse(ctx context.Context, sel ast.SelectionSet, v model.TPVMutationResponse) graphql.Marshaler {
	return ec._TPVMutationResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNTPVMutationResponse2ᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐTPVMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.TPVMutationResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TPVMutationResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalNVentaFields2exampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐVentaFields(ctx context.Context, v interface{}) (model.VentaFields, error) {
	res, err := ec.unmarshalInputVentaFields(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNVentaMutationResponse2exampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐVentaMutationResponse(ctx context.Context, sel ast.SelectionSet, v model.VentaMutationResponse) graphql.Marshaler {
	return ec._VentaMutationResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNVentaMutationResponse2ᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐVentaMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.VentaMutationResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._VentaMutationResponse(ctx, sel, v)
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	return res
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalBoolean(*v)
	return res
}

func (ec *executionContext) marshalOCierreTPV2ᚕᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐCierreTpv(ctx context.Context, sel ast.SelectionSet, v []*model.CierreTpv) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCierreTPV2ᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐCierreTpv(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOCierreTPV2ᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐCierreTpv(ctx context.Context, sel ast.SelectionSet, v *model.CierreTpv) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CierreTPV(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCierreTPVInput2ᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐCierreTPVInput(ctx context.Context, v interface{}) (*model.CierreTPVInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCierreTPVInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOCierresTPVFind2ᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐCierresTPVFind(ctx context.Context, v interface{}) (*model.CierresTPVFind, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCierresTPVFind(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCliente2ᚕᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐCliente(ctx context.Context, sel ast.SelectionSet, v []*model.Cliente) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCliente2ᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐCliente(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOCliente2ᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐCliente(ctx context.Context, sel ast.SelectionSet, v *model.Cliente) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Cliente(ctx, sel, v)
}

func (ec *executionContext) unmarshalOClienteInput2ᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐClienteInput(ctx context.Context, v interface{}) (*model.ClienteInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputClienteInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOClientesFind2ᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐClientesFind(ctx context.Context, v interface{}) (*model.ClientesFind, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputClientesFind(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOEmpleado2ᚕᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐEmpleado(ctx context.Context, sel ast.SelectionSet, v []*model.Empleado) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOEmpleado2ᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐEmpleado(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOEmpleado2ᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐEmpleado(ctx context.Context, sel ast.SelectionSet, v *model.Empleado) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Empleado(ctx, sel, v)
}

func (ec *executionContext) unmarshalOEmpleadoInput2ᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐEmpleadoInput(ctx context.Context, v interface{}) (*model.EmpleadoInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEmpleadoInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOEmpleadosFind2ᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐEmpleadosFind(ctx context.Context, v interface{}) (*model.EmpleadosFind, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEmpleadosFind(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOFloat2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloatContext(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFloat2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalFloatContext(*v)
	return graphql.WrapContextMarshaler(ctx, res)
}

func (ec *executionContext) unmarshalOID2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNID2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOID2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNID2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOID2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalID(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOID2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalID(*v)
	return res
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalInt(*v)
	return res
}

func (ec *executionContext) marshalOJwtValidationResult2ᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐJwtValidationResult(ctx context.Context, sel ast.SelectionSet, v *model.JwtValidationResult) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._JwtValidationResult(ctx, sel, v)
}

func (ec *executionContext) marshalOLoginResult2ᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐLoginResult(ctx context.Context, sel ast.SelectionSet, v *model.LoginResult) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._LoginResult(ctx, sel, v)
}

func (ec *executionContext) marshalOProducto2ᚕᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐProducto(ctx context.Context, sel ast.SelectionSet, v []*model.Producto) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOProducto2ᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐProducto(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOProducto2ᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐProducto(ctx context.Context, sel ast.SelectionSet, v *model.Producto) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Producto(ctx, sel, v)
}

func (ec *executionContext) marshalOProductoVendido2ᚕᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐProductoVendido(ctx context.Context, sel ast.SelectionSet, v []*model.ProductoVendido) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOProductoVendido2ᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐProductoVendido(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOProductoVendido2ᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐProductoVendido(ctx context.Context, sel ast.SelectionSet, v *model.ProductoVendido) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ProductoVendido(ctx, sel, v)
}

func (ec *executionContext) unmarshalOProductoVendidoInput2ᚕᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐProductoVendidoInput(ctx context.Context, v interface{}) ([]*model.ProductoVendidoInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.ProductoVendidoInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOProductoVendidoInput2ᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐProductoVendidoInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOProductoVendidoInput2ᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐProductoVendidoInput(ctx context.Context, v interface{}) (*model.ProductoVendidoInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputProductoVendidoInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOProductosFind2ᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐProductosFind(ctx context.Context, v interface{}) (*model.ProductosFind, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputProductosFind(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOString2ᚕᚖstring(ctx context.Context, v interface{}) ([]*string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOString2ᚖstring(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕᚖstring(ctx context.Context, sel ast.SelectionSet, v []*string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOString2ᚖstring(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) marshalOTPV2ᚕᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐTpv(ctx context.Context, sel ast.SelectionSet, v []*model.Tpv) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOTPV2ᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐTpv(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOTPV2ᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐTpv(ctx context.Context, sel ast.SelectionSet, v *model.Tpv) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TPV(ctx, sel, v)
}

func (ec *executionContext) unmarshalOTPVsFind2ᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐTPVsFind(ctx context.Context, v interface{}) (*model.TPVsFind, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputTPVsFind(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOVenta2ᚕᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐVenta(ctx context.Context, sel ast.SelectionSet, v []*model.Venta) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOVenta2ᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐVenta(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOVenta2ᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐVenta(ctx context.Context, sel ast.SelectionSet, v *model.Venta) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Venta(ctx, sel, v)
}

func (ec *executionContext) unmarshalOVentasFind2ᚖexampleᚗcomᚋmᚋv2ᚋgraphᚋmodelᚐVentasFind(ctx context.Context, v interface{}) (*model.VentasFind, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputVentasFind(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
