# GraphQL schema example
#
# https://gqlgen.com/getting-started/


type LoginResult {
  message: String!
  success: Boolean!
  token: String
}

input Credentials {
  email: String!
  password: String!
}

type JwtValidationResult {
  validado: Boolean!
}

type Cliente {
  _id: ID!
  nif: String!
  nombre: String!
  calle: String!
  cp: String!
}

type ClienteMutationResponse {
  message: String!
  successful: Boolean!
}

input ClienteFind {
  _id: ID
  nif: String
}

input ClientesFind {
  _ids: [ID!]
  nombre: String
  query: String
}

type Empleado {
  _id: ID!
  nombre: String!
  apellidos: String!
  dni: String
  rol: String!
  genero: String
  email: String!
  horasPorSemana: Float
  fechaAlta: String
}

type EmpleadoMutationResponse {
  message: String!
  successful: Boolean!
}

input EmpleadoFind {
  _id: ID
  nombre: String
  dni: String
}

input EmpleadosFind {
  _ids: [ID!]
  nombre: String
  rol: String
  query: String
}

type ResponseMutation {
  message: String!
  successful: Boolean!
}

type Producto {
  _id: ID!
  nombre: String
  proveedor: String
  familia: String
  precioVenta: Float
  precioCompra: Float
  iva: Float
  margen: Float
  promociones: [String]
  ean: String
  cantidad: Int
  cantidadRestock: Int
  alta: Boolean
  img: String
  createdAt: String
  updatedAt: String
}

input ProductoFind {
  _id: ID
  nombre: String
  ean: String
}

input ProductosFind {
  _ids: [ID!]
  nombre: String
  familia: String
  proveedor: String
  query: String
}

input ProductoAddInput {
  nombre: String!
  proveedor: String
  familia: String
  precioVenta: Float!
  precioCompra: Float!
  iva: Float!
  margen: Float!
  promociones: [String]
  ean: String!
  cantidad: Int
  cantidadRestock: Int
  alta: Boolean!
  img: String
}

input ProductoUpdateInput {
  _id: ID!
  nombre: String
  proveedor: String
  familia: String
  precioVenta: Float
  precioCompra: Float
  iva: Float
  margen: Float
  promociones: [String]
  ean: String
  cantidad: Int
  cantidadRestock: Int
  alta: Boolean
  img: String
}

type ProductoMutationResponse {
  message: String!
  successful: Boolean!
}

type CierreTPV {
  _id: ID!,
  tpv: ID!,
  cajaInicial: Float,
  abiertoPor: Empleado,
  cerradoPor: Empleado,
  apertura: String,
  cierre: String,
  numVentas: Int,
  ventasEfectivo: Float,
  ventasTarjeta: Float,
  ventasTotales: Float,
  dineroEsperadoEnCaja: Float,
  dineroRealEnCaja: Float,
  dineroRetirado:Float,
  fondoDeCaja: Float,
  beneficio: Float,
  nota: String
}

input CierreTPVInput {
  _id: ID,
  tpv: ID!,
  cajaInicial: Float!,
  abiertoPor: EmpleadoInput!,
  cerradoPor: EmpleadoInput!,
  apertura: String!,
  cierre: String,
  numVentas: Int!
  ventasEfectivo: Float!,
  ventasTarjeta: Float!,
  ventasTotales: Float!,
  dineroEsperadoEnCaja: Float!,
  dineroRealEnCaja: Float!,
  dineroRetirado:Float!,
  fondoDeCaja: Float!,
  nota: String,
}

input EmpleadoInput {
  _id: ID!
  nombre: String!
  apellidos: String!
  dni: String
  rol: String!
  genero: String
  email: String!
  horasPorSemana: Float
  fechaAlta: String
}

type CierreTPVMutationResponse {
  message: String!
  successful: Boolean!
  token: String
  cierre: CierreTPV
}

input CierreTPVFind {
  _id: ID
  fecha: String
}

input CierresTPVFind {
  fecha: String
}

type TPV {
  _id: ID!
  nombre: String
  enUsoPor: Empleado
  libre: Boolean
  cajaInicial: Int
  createdAt: String
  updatedAt: String
}

type TPVMutationResponse {
  message: String!
  successful: Boolean!
}

type TPVMutationJwtResponse {
  token: String!
  successful: Boolean
}

input TPVFind {
  _id: ID
  nombre: String
  empleadoId: ID
}

input TPVsFind {
  libre: Boolean!
}

type Venta {
  _id: ID!
  productos: [ProductoVendido]
  dineroEntregadoEfectivo: Float
  dineroEntregadoTarjeta: Float
  precioVentaTotalSinDto: Float
  precioVentaTotal: Float
  cambio: Float
  cliente: Cliente
  vendidoPor: Empleado
  modificadoPor: Empleado
  tipo: String
  descuentoEfectivo: Float
  descuentoPorcentaje: Float
  tpv: ID
  createdAt: String
  updatedAt: String
}

type VentaMutationResponse {
  _id: String
  message: String!
  successful: Boolean!
  createdAt: String
} 

type ProductoVendido {
  _id: ID!
  nombre: String
  proveedor: String
  familia: String
  precioVenta: Float
  precioCompra: Float
  iva: Float
  margen: Float
  ean: String
  cantidadVendida: Int
  createdAt: String
  updatedAt: String
}

input ProductoVendidoInput {
  _id: ID!
  nombre: String
  proveedor: String
  familia: String
  precioVenta: Float
  precioCompra: Float
  iva: Float
  margen: Float
  ean: String
  cantidadVendida: Int
  createdAt: String
  updatedAt: String
  dto: Float
}

input VentasFind {
  _ids: [ID!]
  clienteId: String
  tipo: String
  vendedorId: String
  createdAt: String
  fechaInicial: String
  fechaFinal: String
  tpv: ID
  query: String
}

input ClienteInput {
  _id: ID!
  nif: String!
  nombre: String!
  calle: String!
  cp: String!
}

input VentaFields {
  productos: [ProductoVendidoInput]!
  dineroEntregadoEfectivo: Float!
  dineroEntregadoTarjeta: Float!
  precioVentaTotalSinDto: Float!
  precioVentaTotal: Float!
  cambio: Float!
  cliente: ClienteInput!
  vendidoPor: EmpleadoInput!
  modificadoPor: EmpleadoInput!
  tipo: String!
  descuentoEfectivo: Float!
  descuentoPorcentaje: Float!
  tpv: ID!
}

type Query {
  login(loginValues: Credentials!): LoginResult
  validateJwt(jwt: String!): JwtValidationResult
  cliente(find: ClienteFind!): Cliente
  clientes(find: ClientesFind, limit: Int): [Cliente]
  empleado(find: EmpleadoFind!): Empleado
  empleados(find: EmpleadosFind, limit: Int): [Empleado]
  producto(find: ProductoFind!): Producto
  productos(find: ProductosFind, limit: Int): [Producto]
  cierreTPV(find: CierreTPVFind!): CierreTPV
  cierresTPVs(find: CierresTPVFind, limit: Int): [CierreTPV]
  tpv(find: TPVFind!): TPV
  tpvs(find: TPVsFind, limit: Int): [TPV]
  venta(_id: ID!): Venta
  ventas(find: VentasFind, limit: Int, order: String, offset: Int): [Venta]
}

type Mutation {
  addCliente(nif: String!, nombre: String!, calle: String, cp: String): ClienteMutationResponse!,
  deleteCliente(_id: ID!): ClienteMutationResponse!,
  updateCliente(_id: ID!, nif: String, nombre: String, calle: String, cp: String): ClienteMutationResponse!,
  addEmpleado(nombre: String!, apellidos: String!, dni: String!, rol: String!, genero: String, email: String!): EmpleadoMutationResponse!,
  deleteEmpleado(_id: ID!): EmpleadoMutationResponse!,
  updateEmpleado(_id: ID!, nombre: String, apellidos: String, dni: String, rol: String, genero: String, email: String, horasPorSemana: Float, fechaAlta: String): EmpleadoMutationResponse!,
  addProductosFile(csv: String!): ResponseMutation!
  addClientesFile(csv: String!): ResponseMutation!
  addVentasFile(ventasJson: String!): ResponseMutation!
  addProducto(producto: ProductoAddInput!): ProductoMutationResponse!
  deleteProducto(_id: ID!): ProductoMutationResponse!
  updateProducto(producto: ProductoUpdateInput!): ProductoMutationResponse!
  addCierreTPV(cierre: CierreTPVInput!): CierreTPVMutationResponse!        
  deleteCierreTPV(_id: ID!): TPVMutationResponse!        
  updateCierreTPV(cierre: CierreTPVInput): CierreTPVMutationResponse!
  addTPV(nombre: String!, enUsoPor: ID, libre: Boolean, cajaInicial: Int): TPVMutationResponse!
  deleteTPV(_id: ID!): TPVMutationResponse!
  updateTPV(_id: ID!, nombre: String, enUsoPor: ID, libre: Boolean, cajaInicial: Int): TPVMutationResponse!
  ocupyTPV(idEmpleado: ID!, idTPV: ID!, cajaInicial: Float!): TPVMutationJwtResponse!
  freeTPV(idEmpleado: ID!, idTPV: ID!): TPVMutationJwtResponse!
  addVenta(fields: VentaFields!): VentaMutationResponse!
  deleteVenta(_id: ID!): VentaMutationResponse!
  updateVenta(_id: ID!, productos: [ProductoVendidoInput], dineroEntregadoEfectivo: Float, descuentoPorcentaje: Float, precioVentaTotal: Float!, cambio: Float,
  clienteId: ClienteInput, vendidoPor: EmpleadoInput, modificadoPor: EmpleadoInput, tipo: String, descuentoEfectivo: Float): VentaMutationResponse!
}






